Parse State: 0	Cursor Position: 1 1
Candidate List: ['1 : ', '[T, ID, T, =, NT, Expr] : 422', '2 : ', '[T, ID, T, ., T, ID, T, =, NT, Expr] : 399', '3 : ', '[T, ID, T, ., T, ID, T, (, NT, Exprs, T, )] : 246', '4 : ', '[T, ID, T, (, T, )] : 123', '5 : ', '[T, ID, T, :] : 59', '6 : ', '[T, ID, NT, Idxs, T, =, NT, Expr] : 26', '7 : ', '[T, For, T, ID, T, =, NT, Expr, T, To, NT, Expr, NT, OptStep, NT, CRStmtCRs, T, EndFor] : 21', '8 : ', '[T, Sub, T, ID, NT, CRStmtCRs, T, EndSub] : 11', '9 : ', '[T, While, NT, Expr, NT, CRStmtCRs, T, EndWhile] : 7', '10 : ', '[T, Goto, T, ID] : 3', '11 : ', '[T, If, NT, Expr, T, Then, NT, CRStmtCRs, NT, MoreThanZeroElseIf] : 1']

                This is the incomplete Small Basic programming language code:
                
                'Identifier Idxs = Expression'
                Complete the 'Identifier Idxs = Expression' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'Identifier Idxs = Expression'. 
                
Time taken: 0.8856029510498047 seconds
Received response with candidate: 1. ArrayIndexes = GetRandomNumber(1, 10)
2. IndexList = LoopIndex * 2
3. Positions = MouseX + MouseY

                This is the incomplete Small Basic programming language code:
                
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: Similar to this example:

'next token or line'
next token or line
next token or line
Actual result:  friends [ "Rob" ] [ "Name" ] = "Robert"

Parse State: 6	Cursor Position: 1 8
Candidate List: ['1 : ', '[T, =, NT, Expr] : 162103', '2 : ', '[T, ., T, ID, T, (, NT, Exprs, T, )] : 131828', '3 : ', '[T, [, NT, Expr, T, ]] : 68410', '4 : ', '[T, ., T, ID, T, =, NT, Expr] : 45876', '5 : ', '[T, (, T, )] : 31942', '6 : ', '[T, [, NT, Expr, T, ], NT, Idxs] : 28947', '7 : ', '[T, :] : 2238']

                This is the incomplete Small Basic programming language code:
                friends
                '[ Expression ] Idxs'
                Complete the '[ Expression ] Idxs' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of '[ Expression ] Idxs'. 
                
Time taken: 1.1679434776306152 seconds
Received response with candidate: 1. friends[1]
2. friends["Alice"]
3. friends[randomNumber]

                This is the incomplete Small Basic programming language code:
                friends
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: 1. LET friendName = "John"
2. friends[1] = "Alice"
3. friends.Add("Bob")
Actual result:  [ "Rob" ] [ "Name" ]

Parse State: 32	Cursor Position: 1 9
Candidate List: ['1 : ', '[T, NUM] : 116941', '2 : ', '[T, ID] : 67237', '3 : ', '[T, STR] : 53454', '4 : ', '[T, ID, NT, Idxs] : 2705', '5 : ', '[T, ID, T, ., T, ID, T, (, NT, Exprs, T, )] : 431', '6 : ', '[T, ID, T, ., T, ID] : 82', '7 : ', '[T, (, NT, Expr, T, )] : 57', '8 : ', '[T, -, NT, Primary] : 33']

                This is the incomplete Small Basic programming language code:
                friends[
                'String'
                Complete the 'String' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'String'. 
                
Time taken: 0.6598048210144043 seconds
Received response with candidate: friends[
'String'
'Name'
'Age'

                This is the incomplete Small Basic programming language code:
                friends[
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: 1. = "Alice"
2. = "Bob"
3. = "Charlie"
Actual result:  "Rob"

Parse State: 60	Cursor Position: 1 14
Candidate List: ['1 : ', '[T, ]] : 177961', '2 : ', '[T, ], NT, Idxs] : 62979']

                This is the incomplete Small Basic programming language code:
                friends["Rob"
                '] Idxs'
                Complete the '] Idxs' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of '] Idxs'. 
                
Time taken: 0.8675422668457031 seconds
Received response with candidate: 1) friends["Rob"]Idxs
2) friends["Rob"] Idxs
3) friends["Rob"]!Idxs

                This is the incomplete Small Basic programming language code:
                friends["Rob"
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: 1. ] = "Mike"
2. ] = "Sara"
3. ] = "John"
Actual result:  ] [ "Name" ]

Parse State: 84	Cursor Position: 1 15
Candidate List: ['1 : ', '[T, [, NT, Expr, T, ]] : 50424', '2 : ', '[T, [, NT, Expr, T, ], NT, Idxs] : 12555']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]
                '[ Expression ]'
                Complete the '[ Expression ]' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of '[ Expression ]'. 
                
Time taken: 0.956639289855957 seconds
Received response with candidate: 1. = "John"
2. = {"Mike"}
3. = 23

                This is the incomplete Small Basic programming language code:
                friends["Rob"]
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: 1. = "is a software engineer"
2. = "lives in New York"
3. = "has a dog named Max"
Actual result:  [ "Name" ]

Parse State: 32	Cursor Position: 1 16
Candidate List: ['1 : ', '[T, NUM] : 116941', '2 : ', '[T, ID] : 67237', '3 : ', '[T, STR] : 53454', '4 : ', '[T, ID, NT, Idxs] : 2705', '5 : ', '[T, ID, T, ., T, ID, T, (, NT, Exprs, T, )] : 431', '6 : ', '[T, ID, T, ., T, ID] : 82', '7 : ', '[T, (, NT, Expr, T, )] : 57', '8 : ', '[T, -, NT, Primary] : 33']

                This is the incomplete Small Basic programming language code:
                friends["Rob"][
                'String'
                Complete the 'String' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'String'. 
                
Time taken: 1.4157023429870605 seconds
Received response with candidate: 1. "Age"
2. "Address"
3. "Phone number"

                This is the incomplete Small Basic programming language code:
                friends["Rob"][
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: 1. "age"] = 25
2. "age"] = 30
3. "age"] = 28
Actual result:  "Name"

Parse State: 60	Cursor Position: 1 22
Candidate List: ['1 : ', '[T, ]] : 177961', '2 : ', '[T, ], NT, Idxs] : 62979']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"
                ']'
                Complete the ']' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of ']'. 
                
Time taken: 0.7497127056121826 seconds
Received response with candidate: 1. "Age"]
2. "Address"]
3. "Phone Number"]

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: friends["Rob"]["Name"]
friends["Rob"]["Age"]
friends["Rob"]["Location"]
Actual result:  ]

Parse State: 27	Cursor Position: 1 24
Candidate List: ['1 : ', '[T, =, NT, Expr] : 97357']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"]
                '= Expression'
                Complete the '= Expression' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of '= Expression'. 
                
Time taken: 0.6788210868835449 seconds
Received response with candidate: 1. "Rob"
2. "John"
3. "Emily"

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"]
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: 1. = "is"
2. = "Age"
3. = + "isMale"
Actual result:  = "Robert"

Parse State: 56	Cursor Position: 1 26
Candidate List: ['1 : ', '[T, STR] : 37684', '2 : ', '[T, NUM] : 24115', '3 : ', '[T, ID] : 16294', '4 : ', '[T, ID, T, ., T, ID, T, (, NT, Exprs, T, )] : 7281', '5 : ', '[T, ID, NT, Idxs] : 6031', '6 : ', '[T, -, NT, Primary] : 4996', '7 : ', '[T, (, NT, Expr, T, )] : 569', '8 : ', '[T, ID, T, ., T, ID] : 387']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] =
                'String'
                Complete the 'String' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'String'. 
                
Time taken: 0.9184646606445312 seconds
Received response with candidate: 1. "Alex"
2. "Sarah"
3. "Chris"

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] =
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: 1. "Robert"
2. "Robbie"
3. "Bob"
Actual result:  "Robert"

Parse State: 3	Cursor Position: 1 35
Candidate List: ['1 : ', '[T, CR, NT, MoreThanOneStmt] : 207345']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert"
                'CR MoreThanOneStmt'
                Complete the 'CR MoreThanOneStmt' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'CR MoreThanOneStmt'. 
                
Time taken: 1.9403479099273682 seconds
Received response with candidate: friends["Rob"]["Age"] = 25
friends["Rob"]["Hobby"] = "Playing basketball"
friends["Rob"]["Location"] = "New York City"

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert"
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: 1. friends["Rob"]["Age"] = 25
2. TextWindow.WriteLine(friends["Rob"]["Name"])
3. friends["Rob"]["City"] = "New York"
Actual result:  \n friends [ "Rob" ] [ "Phone" ] = "555-6789" \n \n friends [ "VJ" ] [ "Name" ] = "Vijaye" \n friends [ "VJ" ] [ "Phone" ] = "555-4567" \n \n friends [ "Ash" ] [ "Name" ] = "Ashley" \n friends [ "Ash" ] [ "Phone" ] = "555-2345" \n \n TextWindow . Write ( "Enter the nickname: " ) \n nickname = TextWindow . Read ( ) \n \n TextWindow . WriteLine ( "Name: " + friends [ nickname ] [ "Name" ] ) \n TextWindow . WriteLine ( "Phone: " + friends [ nickname ] [ "Phone" ] )

Parse State: 11	Cursor Position: 2 1
Candidate List: ['1 : ', '[T, ID, T, =, NT, Expr] : 34613', '2 : ', '[T, ID, T, ., T, ID, T, (, NT, Exprs, T, )] : 32747', '3 : ', '[T, ID, T, ., T, ID, T, =, NT, Expr] : 19496', '4 : ', '[T, Sub, T, ID, NT, CRStmtCRs, T, EndSub] : 18421', '5 : ', '[T, ID, T, (, T, )] : 9474', '6 : ', '[T, ID, NT, Idxs, T, =, NT, Expr] : 9366', '7 : ', '[T, If, NT, Expr, T, Then, NT, CRStmtCRs, NT, MoreThanZeroElseIf] : 5075', '8 : ', '[T, For, T, ID, T, =, NT, Expr, T, To, NT, Expr, NT, OptStep, NT, CRStmtCRs, T, EndFor] : 2043', '9 : ', '[T, While, NT, Expr, NT, CRStmtCRs, T, EndWhile] : 1706', '10 : ', '[T, ID, T, :] : 1074', '11 : ', '[T, Goto, T, ID] : 421']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert"
                'Identifier Idxs = Expression'
                Complete the 'Identifier Idxs = Expression' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'Identifier Idxs = Expression'. 
                
Time taken: 1.07932448387146 seconds
Received response with candidate: 1. Identifier Idxs = friends.Length
2. Identifier Idxs = friends["Rob"].Length
3. Identifier Idxs = friends["Rob"]["Name"].Length

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert"
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: 1. friends["Rob"]["Age"] = 25
2. friends["Rob"]["Phone"] = "555-1234"
3. friends["Rob"]["Location"] = "New York"
Actual result:  friends [ "Rob" ] [ "Phone" ] = "555-6789"

Parse State: 6	Cursor Position: 2 8
Candidate List: ['1 : ', '[T, =, NT, Expr] : 162103', '2 : ', '[T, ., T, ID, T, (, NT, Exprs, T, )] : 131828', '3 : ', '[T, [, NT, Expr, T, ]] : 68410', '4 : ', '[T, ., T, ID, T, =, NT, Expr] : 45876', '5 : ', '[T, (, T, )] : 31942', '6 : ', '[T, [, NT, Expr, T, ], NT, Idxs] : 28947', '7 : ', '[T, :] : 2238']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends
                '[ Expression ] Idxs'
                Complete the '[ Expression ] Idxs' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of '[ Expression ] Idxs'. 
                
Time taken: 0.9635810852050781 seconds
Received response with candidate: 1. [0]

2. [1]

3. [2]

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: 1. friends["Rob"]["Age"] = 25
2. friends["Rob"]["Location"] = "New York"
3. friends["Alice"]["Name"] = "Alice"
Actual result:  [ "Rob" ] [ "Phone" ]

Parse State: 32	Cursor Position: 2 9
Candidate List: ['1 : ', '[T, NUM] : 116941', '2 : ', '[T, ID] : 67237', '3 : ', '[T, STR] : 53454', '4 : ', '[T, ID, NT, Idxs] : 2705', '5 : ', '[T, ID, T, ., T, ID, T, (, NT, Exprs, T, )] : 431', '6 : ', '[T, ID, T, ., T, ID] : 82', '7 : ', '[T, (, NT, Expr, T, )] : 57', '8 : ', '[T, -, NT, Primary] : 33']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends[
                'String'
                Complete the 'String' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'String'. 
                
Time taken: 0.680626392364502 seconds
Received response with candidate: 1. "Alice"
2. "Tom"
3. "Samantha"

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends[
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: 1. ["Rob"]["Age"] = 25
2. ["Rob"]["Hobby"] = "Coding"
3. ["Lisa"]["Name"] = "Lisa"
Actual result:  "Rob"

Parse State: 60	Cursor Position: 2 14
Candidate List: ['1 : ', '[T, ]] : 177961', '2 : ', '[T, ], NT, Idxs] : 62979']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"
                '] Idxs'
                Complete the '] Idxs' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of '] Idxs'. 
                
Time taken: 0.7232580184936523 seconds
Received response with candidate: 1. "] Idxs"
2. "'] Idxs"
3. "','Idxs"

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: 1. ['Name'] = "Robert"
2. '] = "Robert"'
3. ]['Name'] = "Robert"
Actual result:  ] [ "Phone" ]

Parse State: 84	Cursor Position: 2 15
Candidate List: ['1 : ', '[T, [, NT, Expr, T, ]] : 50424', '2 : ', '[T, [, NT, Expr, T, ], NT, Idxs] : 12555']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]
                '[ Expression ]'
                Complete the '[ Expression ]' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of '[ Expression ]'. 
                
Time taken: 0.9847784042358398 seconds
Received response with candidate: Either of the following could be the three probable expressions:
1. friends["Rob"]["Name"]
2. friends["Rob"]["Age"]
3. friends["Rob"]["Location"]

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: 1. friends["Rob"]["Age"] = 25
2. friends["Rob"]["Hobby"] = "Golf"
3. friends["Rob"]["City"] = "New York"
Actual result:  [ "Phone" ]

Parse State: 32	Cursor Position: 2 16
Candidate List: ['1 : ', '[T, NUM] : 116941', '2 : ', '[T, ID] : 67237', '3 : ', '[T, STR] : 53454', '4 : ', '[T, ID, NT, Idxs] : 2705', '5 : ', '[T, ID, T, ., T, ID, T, (, NT, Exprs, T, )] : 431', '6 : ', '[T, ID, T, ., T, ID] : 82', '7 : ', '[T, (, NT, Expr, T, )] : 57', '8 : ', '[T, -, NT, Primary] : 33']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"][
                'String'
                Complete the 'String' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'String'. 
                
Time taken: 1.2165436744689941 seconds
Received response with candidate: "Age"] = 25
"Occupation"] = "Software Engineer"
"Hobby"] = "Playing basketball"

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"][
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: 1. friends["Rob"]["Age"] = 25
2. friends["Rob"]["Hobby"] = "Swimming"
3. friends["Rob"]["Location"] = "New York"
Actual result:  "Phone"

Parse State: 60	Cursor Position: 2 23
Candidate List: ['1 : ', '[T, ]] : 177961', '2 : ', '[T, ], NT, Idxs] : 62979']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"
                ']'
                Complete the ']' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of ']'. 
                
Time taken: 1.000089406967163 seconds
Received response with candidate: 1. friends["Rob"]["Phone"]
2. friends["Rob"]["Phone"]
3. friends["Rob"]["Phone"]

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: friends["Rob"]["Phone"] = "555-1234" 

friends["Rob"]["Email"] = "rob@example.com"

friends["Rob"]["Address"] = "123 Main St"
Actual result:  ]

Parse State: 27	Cursor Position: 2 25
Candidate List: ['1 : ', '[T, =, NT, Expr] : 97357']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"]
                '= Expression'
                Complete the '= Expression' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of '= Expression'. 
                
Time taken: 1.0564775466918945 seconds
Received response with candidate: 1. friends["Rob"]["Phone"] = "123-456-7890"
2. friends["Rob"]["Phone"] = "555-555-5555"
3. friends["Rob"]["Phone"] = "999-999-9999"

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"]
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: 1. = "123-456-7890"
2. = "555-123-4567"
3. = "789-456-1230"
Actual result:  = "555-6789"

Parse State: 56	Cursor Position: 2 27
Candidate List: ['1 : ', '[T, STR] : 37684', '2 : ', '[T, NUM] : 24115', '3 : ', '[T, ID] : 16294', '4 : ', '[T, ID, T, ., T, ID, T, (, NT, Exprs, T, )] : 7281', '5 : ', '[T, ID, NT, Idxs] : 6031', '6 : ', '[T, -, NT, Primary] : 4996', '7 : ', '[T, (, NT, Expr, T, )] : 569', '8 : ', '[T, ID, T, ., T, ID] : 387']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] =
                'String'
                Complete the 'String' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'String'. 
                
Time taken: 0.9818296432495117 seconds
Received response with candidate: 1. "+1234567890"
2. "555-1234"
3. "800-555-0199"

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] =
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: 1. "123-456-7890"
2. "555-123-4567"
3. "999-888-7777"
Actual result:  "555-6789"

Parse State: 3	Cursor Position: 2 39
Candidate List: ['1 : ', '[T, CR, NT, MoreThanOneStmt] : 207345']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"
                'CR MoreThanOneStmt'
                Complete the 'CR MoreThanOneStmt' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'CR MoreThanOneStmt'. 
                
Time taken: 1.2342979907989502 seconds
Received response with candidate: 1. friends["Alice"]["Name"] = "Alice"
friends["Alice"]["Phone"] = "555-1234"

2. friends["John"]["Name"] = "John"
friends["John"]["Phone"] = "555-4321"

3. friends["Sarah"]["Name"] = "Sarah"
friends["Sarah"]["Phone"] = "

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: 1. friends["Rob"]["Address"] = "123 Main Street"
2. friends["Rob"]["Occupation"] = "Engineer"
3. friends["Rob"]["Email"] = "rob@example.com"
Actual result:  \n \n friends [ "VJ" ] [ "Name" ] = "Vijaye" \n friends [ "VJ" ] [ "Phone" ] = "555-4567" \n \n friends [ "Ash" ] [ "Name" ] = "Ashley" \n friends [ "Ash" ] [ "Phone" ] = "555-2345" \n \n TextWindow . Write ( "Enter the nickname: " ) \n nickname = TextWindow . Read ( ) \n \n TextWindow . WriteLine ( "Name: " + friends [ nickname ] [ "Name" ] ) \n TextWindow . WriteLine ( "Phone: " + friends [ nickname ] [ "Phone" ] )

Parse State: 3	Cursor Position: 3 1
Candidate List: ['1 : ', '[T, CR, NT, MoreThanOneStmt] : 207345']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"
                'CR MoreThanOneStmt'
                Complete the 'CR MoreThanOneStmt' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'CR MoreThanOneStmt'. 
                
Time taken: 1.2720000743865967 seconds
Received response with candidate: friends["Emily"]["Name"] = "Emma"
friends["Emily"]["Phone"] = "555-4321"

friends["Mike"]["Name"] = "Michael"
friends["Mike"]["Phone"] = "555-9876"

friends["Sarah"]["Name"] = "Sara"
friends["Sarah"]["Phone"] = "555-1234"

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: 1. friends["Rob"]["Address"] = "123 Main St"
2. friends["Rob"]["Email"] = "rob@example.com"
3. friends["Rob"]["Age"] = 30
Actual result:  \n friends [ "VJ" ] [ "Name" ] = "Vijaye" \n friends [ "VJ" ] [ "Phone" ] = "555-4567" \n \n friends [ "Ash" ] [ "Name" ] = "Ashley" \n friends [ "Ash" ] [ "Phone" ] = "555-2345" \n \n TextWindow . Write ( "Enter the nickname: " ) \n nickname = TextWindow . Read ( ) \n \n TextWindow . WriteLine ( "Name: " + friends [ nickname ] [ "Name" ] ) \n TextWindow . WriteLine ( "Phone: " + friends [ nickname ] [ "Phone" ] )

Parse State: 11	Cursor Position: 4 1
Candidate List: ['1 : ', '[T, ID, T, =, NT, Expr] : 34613', '2 : ', '[T, ID, T, ., T, ID, T, (, NT, Exprs, T, )] : 32747', '3 : ', '[T, ID, T, ., T, ID, T, =, NT, Expr] : 19496', '4 : ', '[T, Sub, T, ID, NT, CRStmtCRs, T, EndSub] : 18421', '5 : ', '[T, ID, T, (, T, )] : 9474', '6 : ', '[T, ID, NT, Idxs, T, =, NT, Expr] : 9366', '7 : ', '[T, If, NT, Expr, T, Then, NT, CRStmtCRs, NT, MoreThanZeroElseIf] : 5075', '8 : ', '[T, For, T, ID, T, =, NT, Expr, T, To, NT, Expr, NT, OptStep, NT, CRStmtCRs, T, EndFor] : 2043', '9 : ', '[T, While, NT, Expr, NT, CRStmtCRs, T, EndWhile] : 1706', '10 : ', '[T, ID, T, :] : 1074', '11 : ', '[T, Goto, T, ID] : 421']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"
                'Identifier Idxs = Expression'
                Complete the 'Identifier Idxs = Expression' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'Identifier Idxs = Expression'. 
                
Time taken: 1.0104737281799316 seconds
Received response with candidate: 1. 'Identifier Idxs = "Rob"'
2. 'Identifier Idxs = 1'
3. 'Identifier Idxs = "Phone"'

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: 1.  friends["Rob"]["Address"] = "123 Main Street"
2.  friends["Rob"]["Email"] = "rob@example.com"
3.  friends["Rob"]["Birthday"] = "January 15th"
Actual result:  friends [ "VJ" ] [ "Name" ] = "Vijaye"

Parse State: 6	Cursor Position: 4 8
Candidate List: ['1 : ', '[T, =, NT, Expr] : 162103', '2 : ', '[T, ., T, ID, T, (, NT, Exprs, T, )] : 131828', '3 : ', '[T, [, NT, Expr, T, ]] : 68410', '4 : ', '[T, ., T, ID, T, =, NT, Expr] : 45876', '5 : ', '[T, (, T, )] : 31942', '6 : ', '[T, [, NT, Expr, T, ], NT, Idxs] : 28947', '7 : ', '[T, :] : 2238']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends
                '[ Expression ] Idxs'
                Complete the '[ Expression ] Idxs' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of '[ Expression ] Idxs'. 
                
Time taken: 0.756364107131958 seconds
Received response with candidate: 1. ["Jane"]
2. ["Alex"]
3. ["Emily"]

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: 1. friends["Alice"]["Name"] = "Alice"
2. friends["Alice"]["Phone"] = "555-1234"
3. friends["Alice"]["Email"] = "alice@example.com"
Actual result:  [ "VJ" ] [ "Name" ]

Parse State: 32	Cursor Position: 4 9
Candidate List: ['1 : ', '[T, NUM] : 116941', '2 : ', '[T, ID] : 67237', '3 : ', '[T, STR] : 53454', '4 : ', '[T, ID, NT, Idxs] : 2705', '5 : ', '[T, ID, T, ., T, ID, T, (, NT, Exprs, T, )] : 431', '6 : ', '[T, ID, T, ., T, ID] : 82', '7 : ', '[T, (, NT, Expr, T, )] : 57', '8 : ', '[T, -, NT, Primary] : 33']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends[
                'String'
                Complete the 'String' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'String'. 
                
Time taken: 0.7237634658813477 seconds
Received response with candidate: 1. "Alice"
2. "John"
3. "Sarah"

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends[
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: 1. ["Sara"]["Name"] = "Sara" 
   friends["Sara"]["Phone"] = "555-1234"

2. ["John"]["Name"] = "John" 
   friends["John"]["Phone"] = "555-4321"

3. ["Emily"]["Name"] = "Emily" 
   friends["
Actual result:  "VJ"

Parse State: 60	Cursor Position: 4 13
Candidate List: ['1 : ', '[T, ]] : 177961', '2 : ', '[T, ], NT, Idxs] : 62979']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"
                '] Idxs'
                Complete the '] Idxs' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of '] Idxs'. 
                
Time taken: 0.7666213512420654 seconds
Received response with candidate: 1. ["Rob"]
2. ["Rob"]["Phone"]
3. ["VJ"]

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: 1. ["VJ"]["Name"] = "Vijay"
2. ["VJ"]["Phone"] = "123-4567"
3. ["VJ"]["Address"] = "123 Main St."
Actual result:  ] [ "Name" ]

Parse State: 84	Cursor Position: 4 14
Candidate List: ['1 : ', '[T, [, NT, Expr, T, ]] : 50424', '2 : ', '[T, [, NT, Expr, T, ], NT, Idxs] : 12555']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]
                '[ Expression ]'
                Complete the '[ Expression ]' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of '[ Expression ]'. 
                
Time taken: 1.4270782470703125 seconds
Received response with candidate: 1. friends["VJ"]["Name"] = "Vijay"
   friends["VJ"]["Phone"] = "555-1234"

2. friends["VJ"]["Name"] = "Vijay"
   friends["VJ"]["Phone"] = "555-9876"

3. friends["VJ"]["Name"] =

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: 1. friends["VJ"]["Name"] = "Vijay"
2. friends["VJ"]["Phone"] = "555-4321"
3. friends["VJ"]["Address"] = "123 Main Street"
Actual result:  [ "Name" ]

Parse State: 32	Cursor Position: 4 15
Candidate List: ['1 : ', '[T, NUM] : 116941', '2 : ', '[T, ID] : 67237', '3 : ', '[T, STR] : 53454', '4 : ', '[T, ID, NT, Idxs] : 2705', '5 : ', '[T, ID, T, ., T, ID, T, (, NT, Exprs, T, )] : 431', '6 : ', '[T, ID, T, ., T, ID] : 82', '7 : ', '[T, (, NT, Expr, T, )] : 57', '8 : ', '[T, -, NT, Primary] : 33']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"][
                'String'
                Complete the 'String' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'String'. 
                
Time taken: 0.9033210277557373 seconds
Received response with candidate: friends["VJ"]["Email"] = "vj@example.com"
friends["VJ"]["Address"] = "123 Main St."
friends["VJ"]["Hobby"] = "Playing soccer"

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"][
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: 1. "Name" = "Vijay"
2. "Name" = "Vijay"
3. "Phone" = "123-4567"
Actual result:  "Name"

Parse State: 60	Cursor Position: 4 21
Candidate List: ['1 : ', '[T, ]] : 177961', '2 : ', '[T, ], NT, Idxs] : 62979']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"
                ']'
                Complete the ']' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of ']'. 
                
Time taken: 0.747187614440918 seconds
Received response with candidate: friends["VJ"]["Name"]
friends["VJ"]["Phone"]
friends["VJ"]["Address"]

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: 1. = "Vijay"
2. ] = "555-4321" 
3. ["Phone"] = "123-4567"
Actual result:  ]

Parse State: 27	Cursor Position: 4 23
Candidate List: ['1 : ', '[T, =, NT, Expr] : 97357']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"]
                '= Expression'
                Complete the '= Expression' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of '= Expression'. 
                
Time taken: 1.3129427433013916 seconds
Received response with candidate: 1. = "Vijay"
2. = "Vijayakumar"
3. = "VJ"

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"]
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: 1. = "Vijay"

2. = "VJ Singh"

3. = "Veeresh Jadhav"
Actual result:  = "Vijaye"

Parse State: 56	Cursor Position: 4 25
Candidate List: ['1 : ', '[T, STR] : 37684', '2 : ', '[T, NUM] : 24115', '3 : ', '[T, ID] : 16294', '4 : ', '[T, ID, T, ., T, ID, T, (, NT, Exprs, T, )] : 7281', '5 : ', '[T, ID, NT, Idxs] : 6031', '6 : ', '[T, -, NT, Primary] : 4996', '7 : ', '[T, (, NT, Expr, T, )] : 569', '8 : ', '[T, ID, T, ., T, ID] : 387']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] =
                'String'
                Complete the 'String' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'String'. 
                
Time taken: 0.7130661010742188 seconds
Received response with candidate: 1. "Vijay"
2. "Vijaya"
3. "Vijender"

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] =
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: 1. "Vijay"
2. "Vijay Jayaraman"
3. "VJ Raman"
Actual result:  "Vijaye"

Parse State: 3	Cursor Position: 4 34
Candidate List: ['1 : ', '[T, CR, NT, MoreThanOneStmt] : 207345']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye"
                'CR MoreThanOneStmt'
                Complete the 'CR MoreThanOneStmt' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'CR MoreThanOneStmt'. 
                
Time taken: 1.1849949359893799 seconds
Received response with candidate: friends["VJ"]["Phone"] = "555-1234"

friends["Alice"]["Name"] = "Alice"
friends["Alice"]["Phone"] = "555-4321"

friends["John"]["Name"] = "John"
friends["John"]["Phone"] = "555-9876"

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye"
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: friends["VJ"]["Phone"] = "555-4321" 

friends["Alice"]["Name"] = "Alice"

friends["Alice"]["Phone"] = "123-4567"
Actual result:  \n friends [ "VJ" ] [ "Phone" ] = "555-4567" \n \n friends [ "Ash" ] [ "Name" ] = "Ashley" \n friends [ "Ash" ] [ "Phone" ] = "555-2345" \n \n TextWindow . Write ( "Enter the nickname: " ) \n nickname = TextWindow . Read ( ) \n \n TextWindow . WriteLine ( "Name: " + friends [ nickname ] [ "Name" ] ) \n TextWindow . WriteLine ( "Phone: " + friends [ nickname ] [ "Phone" ] )

Parse State: 11	Cursor Position: 5 1
Candidate List: ['1 : ', '[T, ID, T, =, NT, Expr] : 34613', '2 : ', '[T, ID, T, ., T, ID, T, (, NT, Exprs, T, )] : 32747', '3 : ', '[T, ID, T, ., T, ID, T, =, NT, Expr] : 19496', '4 : ', '[T, Sub, T, ID, NT, CRStmtCRs, T, EndSub] : 18421', '5 : ', '[T, ID, T, (, T, )] : 9474', '6 : ', '[T, ID, NT, Idxs, T, =, NT, Expr] : 9366', '7 : ', '[T, If, NT, Expr, T, Then, NT, CRStmtCRs, NT, MoreThanZeroElseIf] : 5075', '8 : ', '[T, For, T, ID, T, =, NT, Expr, T, To, NT, Expr, NT, OptStep, NT, CRStmtCRs, T, EndFor] : 2043', '9 : ', '[T, While, NT, Expr, NT, CRStmtCRs, T, EndWhile] : 1706', '10 : ', '[T, ID, T, :] : 1074', '11 : ', '[T, Goto, T, ID] : 421']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye"
                'Identifier Idxs = Expression'
                Complete the 'Identifier Idxs = Expression' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'Identifier Idxs = Expression'. 
                
Time taken: 0.9507739543914795 seconds
Received response with candidate: friends["VJ"]["Phone"] = "555-4321" 

friends["LT"]["Name"] = "Lindsay"

friends["LT"]["Phone"] = "555-9876"

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye"
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: 1. friends["VJ"]["Phone"] = "555-4321"
2. friends["VJ"]["Address"] = "123 Main Street"
3. friends["VJ"]["Email"] = "vj@example.com"
Actual result:  friends [ "VJ" ] [ "Phone" ] = "555-4567"

Parse State: 6	Cursor Position: 5 8
Candidate List: ['1 : ', '[T, =, NT, Expr] : 162103', '2 : ', '[T, ., T, ID, T, (, NT, Exprs, T, )] : 131828', '3 : ', '[T, [, NT, Expr, T, ]] : 68410', '4 : ', '[T, ., T, ID, T, =, NT, Expr] : 45876', '5 : ', '[T, (, T, )] : 31942', '6 : ', '[T, [, NT, Expr, T, ], NT, Idxs] : 28947', '7 : ', '[T, :] : 2238']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends
                '[ Expression ] Idxs'
                Complete the '[ Expression ] Idxs' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of '[ Expression ] Idxs'. 
                
Time taken: 1.024916648864746 seconds
Received response with candidate: 1. friends["VJ"]["Phone"] = "555-4321"
2. friends["Alice"]["Name"] = "Alice"
3. friends["Alice"]["Phone"] = "555-9876"

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: friends["VJ"]["Phone"] = "123-4567"  

friends["Tom"]["Name"] = "Thomas" 
friends["Tom"]["Phone"] = "987-6543"  

friends["Alice"]["Name"] = "Alice" 
friends["Alice"]["Phone"] = "567-8901"  
Actual result:  [ "VJ" ] [ "Phone" ]

Parse State: 32	Cursor Position: 5 9
Candidate List: ['1 : ', '[T, NUM] : 116941', '2 : ', '[T, ID] : 67237', '3 : ', '[T, STR] : 53454', '4 : ', '[T, ID, NT, Idxs] : 2705', '5 : ', '[T, ID, T, ., T, ID, T, (, NT, Exprs, T, )] : 431', '6 : ', '[T, ID, T, ., T, ID] : 82', '7 : ', '[T, (, NT, Expr, T, )] : 57', '8 : ', '[T, -, NT, Primary] : 33']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends[
                'String'
                Complete the 'String' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'String'. 
                
Time taken: 1.2785179615020752 seconds
Received response with candidate: 1. "VJ"]["Phone"] = "123-4567" 

2. "John"]["Name"] = "John" 

3. "Alice"]["Phone"] = "789-0123"

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends[
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: 1. ["VJ"]["Phone"] = "123-4567" 
2. ["Rob"]["Address"] = "123 Main Street" 
3. ["VJ"]["Address"] = "456 Elm Avenue"
Actual result:  "VJ"

Parse State: 60	Cursor Position: 5 13
Candidate List: ['1 : ', '[T, ]] : 177961', '2 : ', '[T, ], NT, Idxs] : 62979']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"
                '] Idxs'
                Complete the '] Idxs' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of '] Idxs'. 
                
Time taken: 1.1415917873382568 seconds
Received response with candidate: 1) "Phone"
2) "Phone Num"
3) "Phone Number"

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: friends["VJ"]["Phone"] = "555-4321"
                
friends["Alice"]["Name"] = "Alice"
friends["Alice"]["Phone"] = "555-9876" 

friends["Bob"]["Name"] = "Bobby"
friends["Bob"]["Phone"] = "555-1234"
Actual result:  ] [ "Phone" ]

Parse State: 84	Cursor Position: 5 14
Candidate List: ['1 : ', '[T, [, NT, Expr, T, ]] : 50424', '2 : ', '[T, [, NT, Expr, T, ], NT, Idxs] : 12555']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]
                '[ Expression ]'
                Complete the '[ Expression ]' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of '[ Expression ]'. 
                
Time taken: 1.45353102684021 seconds
Received response with candidate: 1. friends["VJ"]["Phone"] = "123-4567"
2. friends["VJ"]["Address"] = "123 Main Street"
3. friends["VJ"]["Email"] = "vj@email.com"

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: friends["VJ"]["Phone"] = "555-1234"
friends["VJ"]["Email"] = "vj@example.com"

friends["Anna"]["Name"] = "Anna"
friends["Anna"]["Phone"] = "555-4321"
Actual result:  [ "Phone" ]

Parse State: 32	Cursor Position: 5 15
Candidate List: ['1 : ', '[T, NUM] : 116941', '2 : ', '[T, ID] : 67237', '3 : ', '[T, STR] : 53454', '4 : ', '[T, ID, NT, Idxs] : 2705', '5 : ', '[T, ID, T, ., T, ID, T, (, NT, Exprs, T, )] : 431', '6 : ', '[T, ID, T, ., T, ID] : 82', '7 : ', '[T, (, NT, Expr, T, )] : 57', '8 : ', '[T, -, NT, Primary] : 33']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"][
                'String'
                Complete the 'String' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'String'. 
                
Time taken: 1.5037257671356201 seconds
Received response with candidate: 
friends["VJ"]["Phone"] = "555-4321"

friends["VJ"]["Address"] = "123 Main Street"

friends["VJ"]["Email"] = "vj@example.com"

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"][
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: 1. friends["VJ"]["Phone"] = "123-4567"  
2. friends["VJ"]["Email"] = "vj@example.com" 
3. friends["VJ"]["Address"] = "123 Main Street"
Actual result:  "Phone"

Parse State: 60	Cursor Position: 5 22
Candidate List: ['1 : ', '[T, ]] : 177961', '2 : ', '[T, ], NT, Idxs] : 62979']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"
                ']'
                Complete the ']' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of ']'. 
                
Time taken: 0.8880815505981445 seconds
Received response with candidate: 1. "]"
2. "] = "
3. "]"

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: 
= "555-4321"  

= "123-4567"  

[Phone"] = "999-8888"
Actual result:  ]

Parse State: 27	Cursor Position: 5 24
Candidate List: ['1 : ', '[T, =, NT, Expr] : 97357']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"]
                '= Expression'
                Complete the '= Expression' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of '= Expression'. 
                
Time taken: 0.8555665016174316 seconds
Received response with candidate: 1. = "555-4321"
2. = "123-4567"
3. = "999-0000"

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"]
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: 1. friends["VJ"]["Phone"] = "123-4567"
2. friends["VJ"]["Phone"] = "987-6543"
3. friends["VJ"]["Phone"] = ""
Actual result:  = "555-4567"

Parse State: 56	Cursor Position: 5 26
Candidate List: ['1 : ', '[T, STR] : 37684', '2 : ', '[T, NUM] : 24115', '3 : ', '[T, ID] : 16294', '4 : ', '[T, ID, T, ., T, ID, T, (, NT, Exprs, T, )] : 7281', '5 : ', '[T, ID, NT, Idxs] : 6031', '6 : ', '[T, -, NT, Primary] : 4996', '7 : ', '[T, (, NT, Expr, T, )] : 569', '8 : ', '[T, ID, T, ., T, ID] : 387']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] =
                'String'
                Complete the 'String' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'String'. 
                
Time taken: 0.8010952472686768 seconds
Received response with candidate: 1. "444-9876"
2. "123-4567"
3. "999-1234"

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] =
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: 1. friends["VJ"]["Phone"] = "555-4321" 

2. friends["VJ"]["Phone"] = "123-4567" 

3. friends["VJ"]["Phone"] = "987-6543"
Actual result:  "555-4567"

Parse State: 3	Cursor Position: 5 38
Candidate List: ['1 : ', '[T, CR, NT, MoreThanOneStmt] : 207345']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"
                'CR MoreThanOneStmt'
                Complete the 'CR MoreThanOneStmt' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'CR MoreThanOneStmt'. 
                
Time taken: 1.5638234615325928 seconds
Received response with candidate: friends["Alice"]["Name"] = "Alice" 
friends["Alice"]["Phone"] = "555-1234"

friends["Bob"]["Name"] = "Bob" 
friends["Bob"]["Phone"] = "555-3456"

friends["Liz"]["Name"] = "Elizabeth" 
friends["Liz"]["Phone"] = "555

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: 1. friends["Rob"]["Address"] = "123 Main Street"
2. friends["VJ"]["Address"] = "456 Elm Street"
3. friends["Rob"]["Email"] = "rob@example.com"
Actual result:  \n \n friends [ "Ash" ] [ "Name" ] = "Ashley" \n friends [ "Ash" ] [ "Phone" ] = "555-2345" \n \n TextWindow . Write ( "Enter the nickname: " ) \n nickname = TextWindow . Read ( ) \n \n TextWindow . WriteLine ( "Name: " + friends [ nickname ] [ "Name" ] ) \n TextWindow . WriteLine ( "Phone: " + friends [ nickname ] [ "Phone" ] )

Parse State: 3	Cursor Position: 6 1
Candidate List: ['1 : ', '[T, CR, NT, MoreThanOneStmt] : 207345']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"
                'CR MoreThanOneStmt'
                Complete the 'CR MoreThanOneStmt' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'CR MoreThanOneStmt'. 
                
Time taken: 1.6352322101593018 seconds
Received response with candidate: CR friends["Anna"]["Name"] = "Anastasia" 
friends["Anna"]["Phone"] = "555-1234"

CR friends["Mike"]["Name"] = "Michael" 
friends["Mike"]["Phone"] = "555-9876"

CR friends["Sarah"]["Name"] = "Sara" 
friends["Sarah"]["Phone

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: 1. friends["Rob"]["Address"] = "123 Main St"
2. friends["VJ"]["Address"] = "456 Elm St"
3. friends["Rob"]["Email"] = "rob@example.com"
Actual result:  \n friends [ "Ash" ] [ "Name" ] = "Ashley" \n friends [ "Ash" ] [ "Phone" ] = "555-2345" \n \n TextWindow . Write ( "Enter the nickname: " ) \n nickname = TextWindow . Read ( ) \n \n TextWindow . WriteLine ( "Name: " + friends [ nickname ] [ "Name" ] ) \n TextWindow . WriteLine ( "Phone: " + friends [ nickname ] [ "Phone" ] )

Parse State: 11	Cursor Position: 7 1
Candidate List: ['1 : ', '[T, ID, T, =, NT, Expr] : 34613', '2 : ', '[T, ID, T, ., T, ID, T, (, NT, Exprs, T, )] : 32747', '3 : ', '[T, ID, T, ., T, ID, T, =, NT, Expr] : 19496', '4 : ', '[T, Sub, T, ID, NT, CRStmtCRs, T, EndSub] : 18421', '5 : ', '[T, ID, T, (, T, )] : 9474', '6 : ', '[T, ID, NT, Idxs, T, =, NT, Expr] : 9366', '7 : ', '[T, If, NT, Expr, T, Then, NT, CRStmtCRs, NT, MoreThanZeroElseIf] : 5075', '8 : ', '[T, For, T, ID, T, =, NT, Expr, T, To, NT, Expr, NT, OptStep, NT, CRStmtCRs, T, EndFor] : 2043', '9 : ', '[T, While, NT, Expr, NT, CRStmtCRs, T, EndWhile] : 1706', '10 : ', '[T, ID, T, :] : 1074', '11 : ', '[T, Goto, T, ID] : 421']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"
                'Identifier Idxs = Expression'
                Complete the 'Identifier Idxs = Expression' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'Identifier Idxs = Expression'. 
                
Time taken: 0.9886224269866943 seconds
Received response with candidate: friends["Rob"]
friends["VJ"]
friends["Rob"]["Name"] 
friends["VJ"]["Name"] 
friends["Rob"]["Phone"] 
friends["VJ"]["Phone"]

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: 1. friends["Rob"]["Email"] = "rob@email.com"
2. friends["Rob"]["Address"] = "123 Main St."
3. friends["VJ"]["Email"] = "vj@email.com"
Actual result:  friends [ "Ash" ] [ "Name" ] = "Ashley"

Parse State: 6	Cursor Position: 7 8
Candidate List: ['1 : ', '[T, =, NT, Expr] : 162103', '2 : ', '[T, ., T, ID, T, (, NT, Exprs, T, )] : 131828', '3 : ', '[T, [, NT, Expr, T, ]] : 68410', '4 : ', '[T, ., T, ID, T, =, NT, Expr] : 45876', '5 : ', '[T, (, T, )] : 31942', '6 : ', '[T, [, NT, Expr, T, ], NT, Idxs] : 28947', '7 : ', '[T, :] : 2238']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends
                '[ Expression ] Idxs'
                Complete the '[ Expression ] Idxs' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of '[ Expression ] Idxs'. 
                
Time taken: 1.4128446578979492 seconds
Received response with candidate: 1. friends["Rob"]["Email"] = "rob@example.com"
2. friends["VJ"]["Email"] = "vj@example.com"
3. friends["Rob"]["Address"] = "123 Main Street"

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: 1. friends["John"]["Name"] = "John" 
2. friends["John"]["Phone"] = "555-1234"  

3. TextWindow.WriteLine(friends["Rob"]["Name"] + " - " + friends["Rob"]["Phone"])
Actual result:  [ "Ash" ] [ "Name" ]

Parse State: 32	Cursor Position: 7 9
Candidate List: ['1 : ', '[T, NUM] : 116941', '2 : ', '[T, ID] : 67237', '3 : ', '[T, STR] : 53454', '4 : ', '[T, ID, NT, Idxs] : 2705', '5 : ', '[T, ID, T, ., T, ID, T, (, NT, Exprs, T, )] : 431', '6 : ', '[T, ID, T, ., T, ID] : 82', '7 : ', '[T, (, NT, Expr, T, )] : 57', '8 : ', '[T, -, NT, Primary] : 33']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends[
                'String'
                Complete the 'String' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'String'. 
                
Time taken: 0.7147157192230225 seconds
Received response with candidate: 1. "Alice"
2. "John"
3. "Sarah"

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends[
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: friends["VJ"]["Age"] = 30
friends["Rob"]["Address"] = "123 Main St."
friends["VJ"]["Email"] = "vijaye@example.com"
Actual result:  "Ash"

Parse State: 60	Cursor Position: 7 14
Candidate List: ['1 : ', '[T, ]] : 177961', '2 : ', '[T, ], NT, Idxs] : 62979']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"
                '] Idxs'
                Complete the '] Idxs' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of '] Idxs'. 
                
Time taken: 1.342634677886963 seconds
Received response with candidate: 1. friends["Ash"]["Name"] = "Ashley" 
   friends["Ash"]["Phone"] = "555-1234"

2. friends["Ash"]["Name"] = "Asher" 
   friends["Ash"]["Phone"] = "555-7890"

3. friends["Ash"]["Name"] = "Ashwin" 


                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: friends["Ash"]["Name"] = "Ashley"
friends["Ash"]["Phone"] = "555-1234"

friends["John"]["Name"] = "John Doe"
friends["John"]["Phone"] = "555-7890" 

friends["Emma"]["Name"] = "Emma Smith"
friends["Emma"]["Phone"] = "555-
Actual result:  ] [ "Name" ]

Parse State: 84	Cursor Position: 7 15
Candidate List: ['1 : ', '[T, [, NT, Expr, T, ]] : 50424', '2 : ', '[T, [, NT, Expr, T, ], NT, Idxs] : 12555']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]
                '[ Expression ]'
                Complete the '[ Expression ]' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of '[ Expression ]'. 
                
Time taken: 1.5320847034454346 seconds
Received response with candidate: friends["Ash"]["Name"] = "Ashley"
friends["Ash"]["Phone"] = "555-1234"

friends["Ash"]["Name"] = "Ash"
friends["Ash"]["Phone"] = "555-7890"

friends["Ash"]["Name"] = "Asher"
friends["Ash"]["Phone"] = "555-2345

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: 'next token or line' = "['Name'] = 'Ashley'"
'next token or line' = "['Phone'] = '555-1234'"
'next token or line' = "['Email'] = 'ashley@example.com'"
Actual result:  [ "Name" ]

Parse State: 32	Cursor Position: 7 16
Candidate List: ['1 : ', '[T, NUM] : 116941', '2 : ', '[T, ID] : 67237', '3 : ', '[T, STR] : 53454', '4 : ', '[T, ID, NT, Idxs] : 2705', '5 : ', '[T, ID, T, ., T, ID, T, (, NT, Exprs, T, )] : 431', '6 : ', '[T, ID, T, ., T, ID] : 82', '7 : ', '[T, (, NT, Expr, T, )] : 57', '8 : ', '[T, -, NT, Primary] : 33']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"][
                'String'
                Complete the 'String' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'String'. 
                
Time taken: 1.074747085571289 seconds
Received response with candidate: friends["Ash"]["Email"] = "ash@example.com"
friends["Ash"]["Address"] = "123 Main St"
friends["Ash"]["Birthday"] = "January 1st"

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"][
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: friends["Ash"]["Name"] = "Ashley"
friends["Ash"]["Phone"] = "555-1234"

friends["Amy"]["Name"] = "Amelia"
friends["Amy"]["Phone"] = "555-7890"

friends["Sam"]["Name"] = "Samuel"
friends["Sam"]["Phone"] = "555-222
Actual result:  "Name"

Parse State: 60	Cursor Position: 7 22
Candidate List: ['1 : ', '[T, ]] : 177961', '2 : ', '[T, ], NT, Idxs] : 62979']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"
                ']'
                Complete the ']' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of ']'. 
                
Time taken: 1.2122523784637451 seconds
Received response with candidate: "

friends["Ash"]["Name"] = "Ashley"
friends["Ash"]["Phone"] = "555-1234"  
"

friends["Ash"]["Name"] = "Asher"
friends["Ash"]["Phone"] = "555-7890"  
"

friends["Ash"]["Name"] = "Ashley"
friends["Ash"]["Phone"]

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: 1. = "Ashley"
2. ] = "555-1234"
3. " = "Ashwin"
Actual result:  ]

Parse State: 27	Cursor Position: 7 24
Candidate List: ['1 : ', '[T, =, NT, Expr] : 97357']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"]
                '= Expression'
                Complete the '= Expression' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of '= Expression'. 
                
Time taken: 0.7319686412811279 seconds
Received response with candidate: 1. = "Ashley"
2. = "Ashish"
3. = "Asher"

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"]
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: 1. = "Ashwin"
2. = "Ashley"
3. = "Ashok"
Actual result:  = "Ashley"

Parse State: 56	Cursor Position: 7 26
Candidate List: ['1 : ', '[T, STR] : 37684', '2 : ', '[T, NUM] : 24115', '3 : ', '[T, ID] : 16294', '4 : ', '[T, ID, T, ., T, ID, T, (, NT, Exprs, T, )] : 7281', '5 : ', '[T, ID, NT, Idxs] : 6031', '6 : ', '[T, -, NT, Primary] : 4996', '7 : ', '[T, (, NT, Expr, T, )] : 569', '8 : ', '[T, ID, T, ., T, ID] : 387']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] =
                'String'
                Complete the 'String' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'String'. 
                
Time taken: 0.7104668617248535 seconds
Received response with candidate: 1. "Ashley"
2. "Ashok"
3. "Asha"

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] =
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: friends["Ash"]["Name"] = "Ashley"

OR

friends["Ash"]["Name"] = "Asher"

OR

friends["Ash"]["Name"] = "Ashton"
Actual result:  "Ashley"

Parse State: 3	Cursor Position: 7 35
Candidate List: ['1 : ', '[T, CR, NT, MoreThanOneStmt] : 207345']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley"
                'CR MoreThanOneStmt'
                Complete the 'CR MoreThanOneStmt' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'CR MoreThanOneStmt'. 
                
Time taken: 1.2577223777770996 seconds
Received response with candidate: 
1. friends["Ash"]["Phone"] = "555-1234"

2. friends["Rob"]["Email"] = "rob@example.com"

3. friends["VJ"]["Address"] = "123 Main St"

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley"
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: 1. friends["Ash"]["Phone"] = "555-7890"
2. friends["Ashley"]["Phone"] = "555-1234"
3. friends["Ash"]["Address"] = "123 Main Street"
Actual result:  \n friends [ "Ash" ] [ "Phone" ] = "555-2345" \n \n TextWindow . Write ( "Enter the nickname: " ) \n nickname = TextWindow . Read ( ) \n \n TextWindow . WriteLine ( "Name: " + friends [ nickname ] [ "Name" ] ) \n TextWindow . WriteLine ( "Phone: " + friends [ nickname ] [ "Phone" ] )

Parse State: 11	Cursor Position: 8 1
Candidate List: ['1 : ', '[T, ID, T, =, NT, Expr] : 34613', '2 : ', '[T, ID, T, ., T, ID, T, (, NT, Exprs, T, )] : 32747', '3 : ', '[T, ID, T, ., T, ID, T, =, NT, Expr] : 19496', '4 : ', '[T, Sub, T, ID, NT, CRStmtCRs, T, EndSub] : 18421', '5 : ', '[T, ID, T, (, T, )] : 9474', '6 : ', '[T, ID, NT, Idxs, T, =, NT, Expr] : 9366', '7 : ', '[T, If, NT, Expr, T, Then, NT, CRStmtCRs, NT, MoreThanZeroElseIf] : 5075', '8 : ', '[T, For, T, ID, T, =, NT, Expr, T, To, NT, Expr, NT, OptStep, NT, CRStmtCRs, T, EndFor] : 2043', '9 : ', '[T, While, NT, Expr, NT, CRStmtCRs, T, EndWhile] : 1706', '10 : ', '[T, ID, T, :] : 1074', '11 : ', '[T, Goto, T, ID] : 421']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley"
                'Identifier Idxs = Expression'
                Complete the 'Identifier Idxs = Expression' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'Identifier Idxs = Expression'. 
                
Time taken: 0.9335412979125977 seconds
Received response with candidate: 1. friends["Rob"]["Address"] = "123 Main Street"
2. friends["VJ"]["Email"] = "vj@example.com"
3. friends["Ash"]["Birthday"] = "January 1st"

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley"
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: 1. friends["Ash"]["Phone"] = "555-1234"
2. friends["Mark"]["Name"] = "Mark"
3. friends["Mark"]["Phone"] = "555-7890"
Actual result:  friends [ "Ash" ] [ "Phone" ] = "555-2345"

Parse State: 6	Cursor Position: 8 8
Candidate List: ['1 : ', '[T, =, NT, Expr] : 162103', '2 : ', '[T, ., T, ID, T, (, NT, Exprs, T, )] : 131828', '3 : ', '[T, [, NT, Expr, T, ]] : 68410', '4 : ', '[T, ., T, ID, T, =, NT, Expr] : 45876', '5 : ', '[T, (, T, )] : 31942', '6 : ', '[T, [, NT, Expr, T, ], NT, Idxs] : 28947', '7 : ', '[T, :] : 2238']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends
                '[ Expression ] Idxs'
                Complete the '[ Expression ] Idxs' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of '[ Expression ] Idxs'. 
                
Time taken: 0.753899097442627 seconds
Received response with candidate: ["Ash"]["Phone"] = "555-1234" 
["Ash"]["Phone"] 
["VJ"]["Name"]

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: 1. ["Ash"]["Phone"] = "555-1234"
2. ["VJ"]["Email"] = "vijaye@email.com"
3.["Rob"]["Address"] = "123 Main St"
Actual result:  [ "Ash" ] [ "Phone" ]

Parse State: 32	Cursor Position: 8 9
Candidate List: ['1 : ', '[T, NUM] : 116941', '2 : ', '[T, ID] : 67237', '3 : ', '[T, STR] : 53454', '4 : ', '[T, ID, NT, Idxs] : 2705', '5 : ', '[T, ID, T, ., T, ID, T, (, NT, Exprs, T, )] : 431', '6 : ', '[T, ID, T, ., T, ID] : 82', '7 : ', '[T, (, NT, Expr, T, )] : 57', '8 : ', '[T, -, NT, Primary] : 33']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends[
                'String'
                Complete the 'String' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'String'. 
                
Time taken: 1.0303401947021484 seconds
Received response with candidate: 1. friends["Ash"]["Phone"] = "555-1234"  
2. friends["LM"]["Name"] = "Liam"  
3. friends["JS"]["Phone"] = "555-7890"  

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends[
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: 
1. friends["Ash"]["Phone"] = "555-9876" 

2. friends["Ash"]["Address"] = "123 Main St" 

3. friends["Ash"]["Email"] = "ashley@example.com"
Actual result:  "Ash"

Parse State: 60	Cursor Position: 8 14
Candidate List: ['1 : ', '[T, ]] : 177961', '2 : ', '[T, ], NT, Idxs] : 62979']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"
                '] Idxs'
                Complete the '] Idxs' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of '] Idxs'. 
                
Time taken: 0.6204771995544434 seconds
Received response with candidate: ["Phone"]
["Phone"]
["Phone"]

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: 
["Ash"]["Phone"] = "555-1234"  

friends["Kim"]["Name"] = "Kimberly" 
friends["Kim"]["Phone"] = "555-7890"  

friends["Sam"]["Name"] = "Samuel" 
friends["Sam"]["Phone"] = "555-2345"  
Actual result:  ] [ "Phone" ]

Parse State: 84	Cursor Position: 8 15
Candidate List: ['1 : ', '[T, [, NT, Expr, T, ]] : 50424', '2 : ', '[T, [, NT, Expr, T, ], NT, Idxs] : 12555']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]
                '[ Expression ]'
                Complete the '[ Expression ]' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of '[ Expression ]'. 
                
Time taken: 1.1410245895385742 seconds
Received response with candidate: 1. friends["Ash"]["Phone"] = "555-1234"
2. friends["Ash"]["Email"] = "ashley@example.com"
3. friends["Ash"]["Address"] = "123 Main Street"

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: friends["Ash"]["Phone"] = "555-1234"  

next token or line

friends["Ash"]["Address"] = "123 Main St"  

next token or line

friends["Ash"]["Email"] = "ashley@example.com"  
Actual result:  [ "Phone" ]

Parse State: 32	Cursor Position: 8 16
Candidate List: ['1 : ', '[T, NUM] : 116941', '2 : ', '[T, ID] : 67237', '3 : ', '[T, STR] : 53454', '4 : ', '[T, ID, NT, Idxs] : 2705', '5 : ', '[T, ID, T, ., T, ID, T, (, NT, Exprs, T, )] : 431', '6 : ', '[T, ID, T, ., T, ID] : 82', '7 : ', '[T, (, NT, Expr, T, )] : 57', '8 : ', '[T, -, NT, Primary] : 33']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"][
                'String'
                Complete the 'String' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'String'. 
                
Time taken: 0.891176700592041 seconds
Received response with candidate: friends["Ash"]["String1"] = "123 Main Street"
friends["Ash"]["String2"] = "ashley@email.com"
friends["Ash"]["String3"] = "Best friend since high school"

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"][
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: 
["Phone"] = "555-1234"  

["Phone"] = "555-7890"  

["Phone"] = "555-3456"  
Actual result:  "Phone"

Parse State: 60	Cursor Position: 8 23
Candidate List: ['1 : ', '[T, ]] : 177961', '2 : ', '[T, ], NT, Idxs] : 62979']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"
                ']'
                Complete the ']' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of ']'. 
                
Time taken: 0.9310331344604492 seconds
Received response with candidate:  

1. "]"
2. "]"
3. "]"

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: = "555-1234"  

friends["Ash"]["Phone"] = "555-9876"  

friends["JP"]["Name"] = "John" 
friends["JP"]["Phone"] = "555-0000"
Actual result:  ]

Parse State: 27	Cursor Position: 8 25
Candidate List: ['1 : ', '[T, =, NT, Expr] : 97357']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"]
                '= Expression'
                Complete the '= Expression' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of '= Expression'. 
                
Time taken: 0.8461108207702637 seconds
Received response with candidate: 1. = "555-1234"
2. = "555-7890"
3. = "555-5432"

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"]
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: friends["Ash"]["Phone"] = "555-1234"  

friends["Ash"]["Phone"] = "555-7890"  

friends["Ash"]["Phone"] = "555-5555"  
Actual result:  = "555-2345"

Parse State: 56	Cursor Position: 8 27
Candidate List: ['1 : ', '[T, STR] : 37684', '2 : ', '[T, NUM] : 24115', '3 : ', '[T, ID] : 16294', '4 : ', '[T, ID, T, ., T, ID, T, (, NT, Exprs, T, )] : 7281', '5 : ', '[T, ID, NT, Idxs] : 6031', '6 : ', '[T, -, NT, Primary] : 4996', '7 : ', '[T, (, NT, Expr, T, )] : 569', '8 : ', '[T, ID, T, ., T, ID] : 387']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] =
                'String'
                Complete the 'String' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'String'. 
                
Time taken: 0.7158036231994629 seconds
Received response with candidate: "555-1234"
"555-9876"
"555-2468"

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] =
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: 
1. = "555-2345" 
2. = "555-7890" 
3. = "555-1234"
Actual result:  "555-2345"

Parse State: 3	Cursor Position: 8 39
Candidate List: ['1 : ', '[T, CR, NT, MoreThanOneStmt] : 207345']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"
                'CR MoreThanOneStmt'
                Complete the 'CR MoreThanOneStmt' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'CR MoreThanOneStmt'. 
                
Time taken: 1.2050468921661377 seconds
Received response with candidate: friends["Rob"]["Age"] = 25
friends["Rob"]["Email"] = "rob@example.com"

friends["VJ"]["Age"] = 30
friends["VJ"]["Email"] = "vj@example.com"

friends["Ash"]["Age"] = 27
friends["Ash"]["Email"] = "ash@example.com"

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: 1. friends["Rob"]["Email"] = "rob@example.com"
2. friends["VJ"]["Email"] = "vj@example.com"
3. friends["Ash"]["Email"] = "ash@example.com"
Actual result:  \n \n TextWindow . Write ( "Enter the nickname: " ) \n nickname = TextWindow . Read ( ) \n \n TextWindow . WriteLine ( "Name: " + friends [ nickname ] [ "Name" ] ) \n TextWindow . WriteLine ( "Phone: " + friends [ nickname ] [ "Phone" ] )

Parse State: 3	Cursor Position: 9 1
Candidate List: ['1 : ', '[T, CR, NT, MoreThanOneStmt] : 207345']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"
                'CR MoreThanOneStmt'
                Complete the 'CR MoreThanOneStmt' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'CR MoreThanOneStmt'. 
                
Time taken: 1.1574184894561768 seconds
Received response with candidate: CR friends["Rob"]["Address"] = "123 Main St"
CR friends["VJ"]["Address"] = "456 Elm St"
CR friends["Ash"]["Address"] = "789 Oak St"

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: 1. friends["Rob"]["Email"] = "rob@example.com"
2. friends["VJ"]["Email"] = "vj@example.com"
3. friends["Ash"]["Email"] = "ash@example.com"
Actual result:  \n TextWindow . Write ( "Enter the nickname: " ) \n nickname = TextWindow . Read ( ) \n \n TextWindow . WriteLine ( "Name: " + friends [ nickname ] [ "Name" ] ) \n TextWindow . WriteLine ( "Phone: " + friends [ nickname ] [ "Phone" ] )

Parse State: 11	Cursor Position: 10 1
Candidate List: ['1 : ', '[T, ID, T, =, NT, Expr] : 34613', '2 : ', '[T, ID, T, ., T, ID, T, (, NT, Exprs, T, )] : 32747', '3 : ', '[T, ID, T, ., T, ID, T, =, NT, Expr] : 19496', '4 : ', '[T, Sub, T, ID, NT, CRStmtCRs, T, EndSub] : 18421', '5 : ', '[T, ID, T, (, T, )] : 9474', '6 : ', '[T, ID, NT, Idxs, T, =, NT, Expr] : 9366', '7 : ', '[T, If, NT, Expr, T, Then, NT, CRStmtCRs, NT, MoreThanZeroElseIf] : 5075', '8 : ', '[T, For, T, ID, T, =, NT, Expr, T, To, NT, Expr, NT, OptStep, NT, CRStmtCRs, T, EndFor] : 2043', '9 : ', '[T, While, NT, Expr, NT, CRStmtCRs, T, EndWhile] : 1706', '10 : ', '[T, ID, T, :] : 1074', '11 : ', '[T, Goto, T, ID] : 421']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"
                'Identifier . Identifier ( Expression )'
                Complete the 'Identifier . Identifier ( Expression )' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'Identifier . Identifier ( Expression )'. 
                
Time taken: 0.7031030654907227 seconds
Received response with candidate: friends["Rob"]["Name"]
friends["Rob"]["Phone"]
friends["VJ"]["Phone"]

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: next token or line
friends["Rob"]["Address"] = "123 Main St"

next token or line
friends["VJ"]["Address"] = "456 Elm St"

next token or line
friends["Ash"]["Address"] = "789 Oak St"
Actual result:  TextWindow . Write ( "Enter the nickname: " )

Parse State: 6	Cursor Position: 10 11
Candidate List: ['1 : ', '[T, =, NT, Expr] : 162103', '2 : ', '[T, ., T, ID, T, (, NT, Exprs, T, )] : 131828', '3 : ', '[T, [, NT, Expr, T, ]] : 68410', '4 : ', '[T, ., T, ID, T, =, NT, Expr] : 45876', '5 : ', '[T, (, T, )] : 31942', '6 : ', '[T, [, NT, Expr, T, ], NT, Idxs] : 28947', '7 : ', '[T, :] : 2238']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow
                '. Identifier ( Expression )'
                Complete the '. Identifier ( Expression )' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of '. Identifier ( Expression )'. 
                
Time taken: 0.7687959671020508 seconds
Received response with candidate: friends["Rob"]["Name"]
friends["VJ"]["Phone"]
friends["Ash"]["Name"]

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: next token or line
    friends["Rob"]["Email"] = "rob@example.com"

next token or line
    friends["VJ"]["Email"] = "vj@example.com"

next token or line
    friends["Ash"]["Email"] = "ash@example.com"
Actual result:  . Write ( "Enter the nickname: " )

Parse State: 30	Cursor Position: 10 12
Candidate List: ['1 : ', '[T, ID, T, (, NT, Exprs, T, )] : 131828', '2 : ', '[T, ID, T, =, NT, Expr] : 45876']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.
                'Identifier ( Expression )'
                Complete the 'Identifier ( Expression )' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'Identifier ( Expression )'. 
                
Time taken: 0.9918389320373535 seconds
Received response with candidate: friends["Rob"]["Name"]
friends["Rob"]["Phone"]

friends["VJ"]["Name"]
friends["VJ"]["Phone"]

friends["Ash"]["Name"]
friends["Ash"]["Phone"]

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: next token or line
friends["Rob"]["Address"] = "123 Main St" 

next token or line
friends["VJ"]["Address"] = "456 Elm St" 

next token or line
friends["Ash"]["Address"] = "789 Oak St"
Actual result:  Write ( "Enter the nickname: " )

Parse State: 58	Cursor Position: 10 17
Candidate List: ['1 : ', '[T, (, NT, Exprs, T, )] : 131828', '2 : ', '[T, =, NT, Expr] : 45876']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.Write
                '( Expression )'
                Complete the '( Expression )' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of '( Expression )'. 
                
Time taken: 1.1862432956695557 seconds
Received response with candidate: friends["Rob"]["Name"] = "Robert"
friends["Rob"]["Phone"] = "555-6789"

friends["VJ"]["Name"] = "Vijaye"
friends["VJ"]["Phone"] = "555-4567"

friends["Ash"]["Name"] = "Ashley"
friends["Ash"]["Phone"] = "555

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.Write
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: 1. friends["Rob"]["Email"] = "rob@example.com"
2. TextWindow.WriteLine(friends["VJ"]["Name"] + " - " + friends["VJ"]["Phone"])
3. friends["Ash"]["Address"] = "123 Main St"
Actual result:  ( "Enter the nickname: " )

Parse State: 83	Cursor Position: 10 18
Candidate List: ['1 : ', '[T, ID] : 40231', '2 : ', '[T, NUM] : 32276', '3 : ', '[T, STR] : 31274', '4 : ', '[T, ID, NT, Idxs] : 11367', '5 : ', '[T, -, NT, Primary] : 1956', '6 : ', '[T, ID, T, ., T, ID, T, (, NT, Exprs, T, )] : 685', '7 : ', '[T, (, NT, Expr, T, )] : 324', '8 : ', '[T, ID, T, ., T, ID] : 242']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.Write(
                'String'
                Complete the 'String' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'String'. 
                
Time taken: 1.2640318870544434 seconds
Received response with candidate: friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.Write(
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: 1. TextWindow.WriteLine(friends["Rob"]["Name"] + " - " + friends["Rob"]["Phone"])
2. TextWindow.WriteLine(friends["VJ"]["Name"] + " - " + friends["VJ"]["Phone"])
3. TextWindow.WriteLine(friends["Ash"]["Name"] + " - " + friends["Ash"]["Phone
Actual result:  "Enter the nickname: "

Parse State: 92	Cursor Position: 10 40
Candidate List: ['1 : ', '[T, )] : 131828']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.Write("Enter the nickname: "
                ')'
                Complete the ')' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of ')'. 
                
Time taken: 1.2776126861572266 seconds
Received response with candidate: 1) 

friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.Write("Enter the nickname: "
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["
Actual result:  )

Parse State: 3	Cursor Position: 10 42
Candidate List: ['1 : ', '[T, CR, NT, MoreThanOneStmt] : 207345']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.Write("Enter the nickname: ")
                'CR MoreThanOneStmt'
                Complete the 'CR MoreThanOneStmt' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'CR MoreThanOneStmt'. 
                
Time taken: 1.2078826427459717 seconds
Received response with candidate: 
friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.Write("Enter the nickname: ")
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: 1. nickname = TextWindow.Read()
2. nickname = TextWindow.ReadNumber()
3. nickname = TextWindow.ReadNonWhiteSpaceToken()
Actual result:  \n nickname = TextWindow . Read ( ) \n \n TextWindow . WriteLine ( "Name: " + friends [ nickname ] [ "Name" ] ) \n TextWindow . WriteLine ( "Phone: " + friends [ nickname ] [ "Phone" ] )

Parse State: 11	Cursor Position: 11 1
Candidate List: ['1 : ', '[T, ID, T, =, NT, Expr] : 34613', '2 : ', '[T, ID, T, ., T, ID, T, (, NT, Exprs, T, )] : 32747', '3 : ', '[T, ID, T, ., T, ID, T, =, NT, Expr] : 19496', '4 : ', '[T, Sub, T, ID, NT, CRStmtCRs, T, EndSub] : 18421', '5 : ', '[T, ID, T, (, T, )] : 9474', '6 : ', '[T, ID, NT, Idxs, T, =, NT, Expr] : 9366', '7 : ', '[T, If, NT, Expr, T, Then, NT, CRStmtCRs, NT, MoreThanZeroElseIf] : 5075', '8 : ', '[T, For, T, ID, T, =, NT, Expr, T, To, NT, Expr, NT, OptStep, NT, CRStmtCRs, T, EndFor] : 2043', '9 : ', '[T, While, NT, Expr, NT, CRStmtCRs, T, EndWhile] : 1706', '10 : ', '[T, ID, T, :] : 1074', '11 : ', '[T, Goto, T, ID] : 421']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.Write("Enter the nickname: ")
                'Identifier = Expression'
                Complete the 'Identifier = Expression' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'Identifier = Expression'. 
                
Time taken: 0.945967435836792 seconds
Received response with candidate: Identifier = TextWindow.Read()
Identifier = friends[TextWindow.Read()]
Identifier = friends[TextWindow.Read()]["Name"]

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.Write("Enter the nickname: ")
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: friends.ContainsKey("Rob")

friends[friends.ContainsKey("Rob")]["Name"]

friends[friends[friends.ContainsKey("Rob")]["Name"]]["Phone"]
Actual result:  nickname = TextWindow . Read ( )

Parse State: 6	Cursor Position: 11 10
Candidate List: ['1 : ', '[T, =, NT, Expr] : 162103', '2 : ', '[T, ., T, ID, T, (, NT, Exprs, T, )] : 131828', '3 : ', '[T, [, NT, Expr, T, ]] : 68410', '4 : ', '[T, ., T, ID, T, =, NT, Expr] : 45876', '5 : ', '[T, (, T, )] : 31942', '6 : ', '[T, [, NT, Expr, T, ], NT, Idxs] : 28947', '7 : ', '[T, :] : 2238']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.Write("Enter the nickname: ") 
nickname
                '= Expression'
                Complete the '= Expression' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of '= Expression'. 
                
Time taken: 0.7352650165557861 seconds
Received response with candidate: 1. nickname = "Rob"
2. nickname = "VJ"
3. nickname = "Ash"

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.Write("Enter the nickname: ") 
nickname
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: 1. nickname = TextWindow.Read()
2. nickname = TextWindow.ReadNumber()
3. nickname = TextWindow.ReadNonnegativeNumber()
Actual result:  = TextWindow . Read ( )

Parse State: 29	Cursor Position: 11 12
Candidate List: ['1 : ', '[T, ID] : 44694', '2 : ', '[T, ID, T, ., T, ID, T, (, NT, Exprs, T, )] : 42463', '3 : ', '[T, NUM] : 34261', '4 : ', '[T, STR] : 20111', '5 : ', '[T, ID, NT, Idxs] : 8883', '6 : ', '[T, ID, T, ., T, ID] : 6123', '7 : ', '[T, (, NT, Expr, T, )] : 3004', '8 : ', '[T, -, NT, Primary] : 2564']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.Write("Enter the nickname: ") 
nickname =
                'Identifier . Identifier ( Expression )'
                Complete the 'Identifier . Identifier ( Expression )' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'Identifier . Identifier ( Expression )'. 
                
Time taken: 1.4639256000518799 seconds
Received response with candidate: friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.Write("Enter the nickname: ") 
nickname =
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: 1. TextWindow.Read() 
2. TextWindow.ReadNumber() 
3. TextWindow.Read() + " " + TextWindow.Read()
Actual result:  TextWindow . Read ( )

Parse State: 22	Cursor Position: 11 22
Candidate List: ['1 : ', '[T, ., T, ID, T, (, NT, Exprs, T, )] : 74070', '2 : ', '[T, [, NT, Expr, T, ]] : 59127', '3 : ', '[T, [, NT, Expr, T, ], NT, Idxs] : 21477', '4 : ', '[T, ., T, ID] : 16490']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.Write("Enter the nickname: ") 
nickname = TextWindow
                '. Identifier ( Expression )'
                Complete the '. Identifier ( Expression )' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of '. Identifier ( Expression )'. 
                
Time taken: 0.8108675479888916 seconds
Received response with candidate: nickname = TextWindow.Read()
nickname = TextWindow.ReadNumber()
nickname = TextWindow.ReadNonNumber()

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.Write("Enter the nickname: ") 
nickname = TextWindow
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: .ReadLine() 
.Read()
.ReadValue()
Actual result:  . Read ( )

Parse State: 53	Cursor Position: 11 23
Candidate List: ['1 : ', '[T, ID, T, (, NT, Exprs, T, )] : 74070', '2 : ', '[T, ID] : 16490']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.Write("Enter the nickname: ") 
nickname = TextWindow.
                'Identifier ( Expression )'
                Complete the 'Identifier ( Expression )' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'Identifier ( Expression )'. 
                
Time taken: 0.60569167137146 seconds
Received response with candidate: Read() 
ReadNumber() 
ReadLine()

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.Write("Enter the nickname: ") 
nickname = TextWindow.
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: Read() 
ReadString()
ReadNumber()
Actual result:  Read ( )

Parse State: 79	Cursor Position: 11 27
Candidate List: ['1 : ', '[T, (, NT, Exprs, T, )] : 74070']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.Write("Enter the nickname: ") 
nickname = TextWindow.Read
                '( Expression )'
                Complete the '( Expression )' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of '( Expression )'. 
                
Time taken: 0.7806451320648193 seconds
Received response with candidate: 1. friends[nickname]["Name"] 
2. friends[nickname]["Phone"]
3. friends[nickname]

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.Write("Enter the nickname: ") 
nickname = TextWindow.Read
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: 1. friends[nickname]["Name"] = TextWindow.Read
2. friends[nickname]["Name"] = TextWindow.Read()
3. friends[nickname]["Phone"] = TextWindow.Read
Actual result:  ( )

Parse State: 102	Cursor Position: 11 28
Candidate List: ['1 : ', '[T, )] : 74070']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.Write("Enter the nickname: ") 
nickname = TextWindow.Read(
                ')'
                Complete the ')' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of ')'. 
                
Time taken: 1.368837594985962 seconds
Received response with candidate: 1) friends
2) friends["Rob"]
3) friends["VJ"]["Phone"]

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.Write("Enter the nickname: ") 
nickname = TextWindow.Read(
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: friends["Rob"]["Name"]
friends["VJ"]["Name"]
friends["Ash"]["Name"]
Actual result:  )

Parse State: 3	Cursor Position: 11 31
Candidate List: ['1 : ', '[T, CR, NT, MoreThanOneStmt] : 207345']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.Write("Enter the nickname: ") 
nickname = TextWindow.Read()
                'CR MoreThanOneStmt'
                Complete the 'CR MoreThanOneStmt' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'CR MoreThanOneStmt'. 
                
Time taken: 1.165302038192749 seconds
Received response with candidate: 1. friends[nickname]["Name"] = TextWindow.Read()
friends[nickname]["Phone"] = TextWindow.Read()

2. If (friends.ContainsKey(nickname)) Then
    friends[nickname]["Name"] = TextWindow.Read()
    friends[nickname]["Phone"] = TextWindow.Read()
EndIf

3. If (friends.ContainsKey(nickname

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.Write("Enter the nickname: ") 
nickname = TextWindow.Read()
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: friends[nickname]["Name"] = TextWindow.Read() 

friends[nickname]["Name"] = TextWindow.ReadNumber() 

friends[nickname]["Name"] = "Unknown"
Actual result:  \n \n TextWindow . WriteLine ( "Name: " + friends [ nickname ] [ "Name" ] ) \n TextWindow . WriteLine ( "Phone: " + friends [ nickname ] [ "Phone" ] )

Parse State: 3	Cursor Position: 12 1
Candidate List: ['1 : ', '[T, CR, NT, MoreThanOneStmt] : 207345']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.Write("Enter the nickname: ") 
nickname = TextWindow.Read()
                'CR MoreThanOneStmt'
                Complete the 'CR MoreThanOneStmt' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'CR MoreThanOneStmt'. 
                
Time taken: 0.8720836639404297 seconds
Received response with candidate: 1. friends.ContainsKey(nickname)
2. If nickname <> ""
3. nickname = "Rob" or nickname = "VJ" or nickname = "Ash"

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.Write("Enter the nickname: ") 
nickname = TextWindow.Read()
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: friends[nickname]["Name"] = TextWindow.Read()
friends[nickname]["Phone"] = TextWindow.Read()

friends[nickname]["Name"] = TextWindow.Read("Enter the name for " + nickname + ": ")
friends[nickname]["Phone"] = TextWindow.Read("Enter the phone number for " + nickname + ": ")

friends[nickname]["Name
Actual result:  \n TextWindow . WriteLine ( "Name: " + friends [ nickname ] [ "Name" ] ) \n TextWindow . WriteLine ( "Phone: " + friends [ nickname ] [ "Phone" ] )

Parse State: 11	Cursor Position: 13 1
Candidate List: ['1 : ', '[T, ID, T, =, NT, Expr] : 34613', '2 : ', '[T, ID, T, ., T, ID, T, (, NT, Exprs, T, )] : 32747', '3 : ', '[T, ID, T, ., T, ID, T, =, NT, Expr] : 19496', '4 : ', '[T, Sub, T, ID, NT, CRStmtCRs, T, EndSub] : 18421', '5 : ', '[T, ID, T, (, T, )] : 9474', '6 : ', '[T, ID, NT, Idxs, T, =, NT, Expr] : 9366', '7 : ', '[T, If, NT, Expr, T, Then, NT, CRStmtCRs, NT, MoreThanZeroElseIf] : 5075', '8 : ', '[T, For, T, ID, T, =, NT, Expr, T, To, NT, Expr, NT, OptStep, NT, CRStmtCRs, T, EndFor] : 2043', '9 : ', '[T, While, NT, Expr, NT, CRStmtCRs, T, EndWhile] : 1706', '10 : ', '[T, ID, T, :] : 1074', '11 : ', '[T, Goto, T, ID] : 421']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.Write("Enter the nickname: ") 
nickname = TextWindow.Read()
                'Identifier . Identifier ( Expression )'
                Complete the 'Identifier . Identifier ( Expression )' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'Identifier . Identifier ( Expression )'. 
                
Time taken: 0.725360631942749 seconds
Received response with candidate: friends[nickname]["Name"]
friends[nickname]["Phone"]
friends[nickname]

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.Write("Enter the nickname: ") 
nickname = TextWindow.Read()
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: friends[nickname]["Name"] = TextWindow.Read() 

friends[nickname]["Phone"] = TextWindow.Read() 

friends[nickname][TextWindow.Read()] = TextWindow.Read()
Actual result:  TextWindow . WriteLine ( "Name: " + friends [ nickname ] [ "Name" ] )

Parse State: 6	Cursor Position: 13 11
Candidate List: ['1 : ', '[T, =, NT, Expr] : 162103', '2 : ', '[T, ., T, ID, T, (, NT, Exprs, T, )] : 131828', '3 : ', '[T, [, NT, Expr, T, ]] : 68410', '4 : ', '[T, ., T, ID, T, =, NT, Expr] : 45876', '5 : ', '[T, (, T, )] : 31942', '6 : ', '[T, [, NT, Expr, T, ], NT, Idxs] : 28947', '7 : ', '[T, :] : 2238']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.Write("Enter the nickname: ") 
nickname = TextWindow.Read()  

TextWindow
                '. Identifier ( Expression )'
                Complete the '. Identifier ( Expression )' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of '. Identifier ( Expression )'. 
                
Time taken: 0.7386713027954102 seconds
Received response with candidate: friends[nickname]["Name"]
friends[nickname]["Phone"]
friends[nickname]["Address"]

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.Write("Enter the nickname: ") 
nickname = TextWindow.Read()  

TextWindow
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: next token or line
friends[nickname]["Name"] = TextWindow.Read()

next token or line
friends[nickname]["Phone"] = TextWindow.Read()

next token or line
TextWindow.WriteLine("Name: " + friends[nickname]["Name"] + ", Phone: " + friends[nickname]["Phone"])
Actual result:  . WriteLine ( "Name: " + friends [ nickname ] [ "Name" ] )

Parse State: 30	Cursor Position: 13 12
Candidate List: ['1 : ', '[T, ID, T, (, NT, Exprs, T, )] : 131828', '2 : ', '[T, ID, T, =, NT, Expr] : 45876']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.Write("Enter the nickname: ") 
nickname = TextWindow.Read()  

TextWindow.
                'Identifier ( Expression )'
                Complete the 'Identifier ( Expression )' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'Identifier ( Expression )'. 
                
Time taken: 0.9828195571899414 seconds
Received response with candidate: friends[nickname]["Name"]
friends[nickname]["Phone"]
friends[nickname]["City"]

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.Write("Enter the nickname: ") 
nickname = TextWindow.Read()  

TextWindow.
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: 1. Write("Name: " + friends[nickname]["Name"] + ", Phone: " + friends[nickname]["Phone"])
2. WriteLine("Name: " + friends[nickname]["Name"] + ", Phone: " + friends[nickname]["Phone"])
3. Read()
Actual result:  WriteLine ( "Name: " + friends [ nickname ] [ "Name" ] )

Parse State: 58	Cursor Position: 13 21
Candidate List: ['1 : ', '[T, (, NT, Exprs, T, )] : 131828', '2 : ', '[T, =, NT, Expr] : 45876']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.Write("Enter the nickname: ") 
nickname = TextWindow.Read()  

TextWindow.WriteLine
                '( Expression )'
                Complete the '( Expression )' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of '( Expression )'. 
                
Time taken: 1.1720852851867676 seconds
Received response with candidate: 1. TextWindow.WriteLine("Name: " + friends[nickname]["Name"] + ", Phone: " + friends[nickname]["Phone"])

2. If friends.ContainsKey(nickname) Then
       TextWindow.WriteLine("Name: " + friends[nickname]["Name"] + ", Phone: " + friends[nickname]["Phone"])
   Else
       Text

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.Write("Enter the nickname: ") 
nickname = TextWindow.Read()  

TextWindow.WriteLine
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: 1. friends[nickname]["Name"]
2. friends[nickname]["Phone"]
3. TextWindow.WriteLine("Name: " + friends[nickname]["Name"] + ", Phone: " + friends[nickname]["Phone"])
Actual result:  ( "Name: " + friends [ nickname ] [ "Name" ] )

Parse State: 83	Cursor Position: 13 22
Candidate List: ['1 : ', '[T, ID] : 40231', '2 : ', '[T, NUM] : 32276', '3 : ', '[T, STR] : 31274', '4 : ', '[T, ID, NT, Idxs] : 11367', '5 : ', '[T, -, NT, Primary] : 1956', '6 : ', '[T, ID, T, ., T, ID, T, (, NT, Exprs, T, )] : 685', '7 : ', '[T, (, NT, Expr, T, )] : 324', '8 : ', '[T, ID, T, ., T, ID] : 242']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.Write("Enter the nickname: ") 
nickname = TextWindow.Read()  

TextWindow.WriteLine(
                'String'
                Complete the 'String' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'String'. 
                
Time taken: 1.4548275470733643 seconds
Received response with candidate: 1. TextWindow.WriteLine("Name: " + friends[nickname]["Name"] + ", Phone: " + friends[nickname]["Phone"])
2. TextWindow.WriteLine("Friend: " + friends[nickname]["Name"] + ", Contact: " + friends[nickname]["Phone"])
3. TextWindow.WriteLine("Nickname: " + friends[nickname]["

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.Write("Enter the nickname: ") 
nickname = TextWindow.Read()  

TextWindow.WriteLine(
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: 1. TextWindow.WriteLine("Name: " + friends[nickname]["Name"] + ", Phone: " + friends[nickname]["Phone"])
2. If friends.ContainsKey(nickname) Then
       TextWindow.WriteLine("Name: " + friends[nickname]["Name"] + ", Phone: " + friends[nickname]["Phone"])
    Else
       Text
Actual result:  "Name: "

Parse State: 18	Cursor Position: 13 31
Candidate List: ['1 : ', '[T, +, NT, MultiplicativeExpr] : 95446', '2 : ', '[T, -, NT, MultiplicativeExpr] : 41871']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.Write("Enter the nickname: ") 
nickname = TextWindow.Read()  

TextWindow.WriteLine("Name: "
                '+ MultiplicativeExpr'
                Complete the '+ MultiplicativeExpr' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of '+ MultiplicativeExpr'. 
                
Time taken: 0.8015024662017822 seconds
Received response with candidate: 1. friends[nickname]["Name"]
2. friends[nickname]["Phone"]
3. friends[nickname]

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.Write("Enter the nickname: ") 
nickname = TextWindow.Read()  

TextWindow.WriteLine("Name: "
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: 1. TextWindow.WriteLine(friends[nickname]["Name"])
2. TextWindow.WriteLine("Phone: " + friends[nickname]["Phone"])
3. TextWindow.WriteLine("Nickname not found in the friends list.")
Actual result:  + friends [ nickname ] [ "Name" ]

Parse State: 48	Cursor Position: 13 33
Candidate List: ['1 : ', '[T, ID] : 38463', '2 : ', '[T, NUM] : 30206', '3 : ', '[T, STR] : 15165', '4 : ', '[T, ID, NT, Idxs] : 7164', '5 : ', '[T, (, NT, Expr, T, )] : 3656', '6 : ', '[T, ID, T, ., T, ID, T, (, NT, Exprs, T, )] : 2629', '7 : ', '[T, ID, T, ., T, ID] : 322', '8 : ', '[T, -, NT, Primary] : 9']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.Write("Enter the nickname: ") 
nickname = TextWindow.Read()  

TextWindow.WriteLine("Name: " +
                'Identifier Idxs'
                Complete the 'Identifier Idxs' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'Identifier Idxs'. 
                
Time taken: 1.1612532138824463 seconds
Received response with candidate: friends[nickname]["Name"]
friends[nickname]["Phone"]

friends.Item(nickname)["Name"]
friends.Item(nickname)["Phone"]

friends.GetSubObject(nickname)["Name"]
friends.GetSubObject(nickname)["Phone"]

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.Write("Enter the nickname: ") 
nickname = TextWindow.Read()  

TextWindow.WriteLine("Name: " +
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: 1. friends[nickname]["Name"]
2. friends[nickname]["Phone"]
3. friends.ContainsKey(nickname)
Actual result:  friends [ nickname ] [ "Name" ]

Parse State: 22	Cursor Position: 13 40
Candidate List: ['1 : ', '[T, ., T, ID, T, (, NT, Exprs, T, )] : 74070', '2 : ', '[T, [, NT, Expr, T, ]] : 59127', '3 : ', '[T, [, NT, Expr, T, ], NT, Idxs] : 21477', '4 : ', '[T, ., T, ID] : 16490']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.Write("Enter the nickname: ") 
nickname = TextWindow.Read()  

TextWindow.WriteLine("Name: " + friends
                '[ Expression ] Idxs'
                Complete the '[ Expression ] Idxs' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of '[ Expression ] Idxs'. 
                
Time taken: 1.0638096332550049 seconds
Received response with candidate: 1. friends[nickname]["Name"]
2. friends[nickname]["Phone"]
3. friends[nickname]

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.Write("Enter the nickname: ") 
nickname = TextWindow.Read()  

TextWindow.WriteLine("Name: " + friends
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: TextWindow.WriteLine(friends[nickname]["Name"])
TextWindow.WriteLine("Phone: " + friends[nickname]["Phone"])

TextWindow.WriteLine("Name: " + friends[nickname]["Name"] + ", Phone: " + friends[nickname]["Phone"])
Actual result:  [ nickname ] [ "Name" ]

Parse State: 32	Cursor Position: 13 41
Candidate List: ['1 : ', '[T, NUM] : 116941', '2 : ', '[T, ID] : 67237', '3 : ', '[T, STR] : 53454', '4 : ', '[T, ID, NT, Idxs] : 2705', '5 : ', '[T, ID, T, ., T, ID, T, (, NT, Exprs, T, )] : 431', '6 : ', '[T, ID, T, ., T, ID] : 82', '7 : ', '[T, (, NT, Expr, T, )] : 57', '8 : ', '[T, -, NT, Primary] : 33']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.Write("Enter the nickname: ") 
nickname = TextWindow.Read()  

TextWindow.WriteLine("Name: " + friends[
                'Identifier'
                Complete the 'Identifier' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'Identifier'. 
                
Time taken: 0.6878445148468018 seconds
Received response with candidate: friends[nickname]["Name"]
friends[nickname]["Phone"]
friends[nickname]

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.Write("Enter the nickname: ") 
nickname = TextWindow.Read()  

TextWindow.WriteLine("Name: " + friends[
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: 1. [nickname]["Name"]
2. friends[nickname]["Name"]
3. friends[nickname]["Name"]
Actual result:  nickname

Parse State: 60	Cursor Position: 13 49
Candidate List: ['1 : ', '[T, ]] : 177961', '2 : ', '[T, ], NT, Idxs] : 62979']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.Write("Enter the nickname: ") 
nickname = TextWindow.Read()  

TextWindow.WriteLine("Name: " + friends[nickname
                '] Idxs'
                Complete the '] Idxs' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of '] Idxs'. 
                
Time taken: 0.8378875255584717 seconds
Received response with candidate: 1.  "']['Name']"
2.  "']['Phone']"
3.  "']"

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.Write("Enter the nickname: ") 
nickname = TextWindow.Read()  

TextWindow.WriteLine("Name: " + friends[nickname
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: 1. ']["Name"] + ", Phone: " + friends[nickname]["Phone"]
2. ']["Name"] + " - " + friends[nickname]["Phone"]
3. ']["Name"] + " (Phone: " + friends[nickname]["Phone"] + ")"
Actual result:  ] [ "Name" ]

Parse State: 84	Cursor Position: 13 50
Candidate List: ['1 : ', '[T, [, NT, Expr, T, ]] : 50424', '2 : ', '[T, [, NT, Expr, T, ], NT, Idxs] : 12555']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.Write("Enter the nickname: ") 
nickname = TextWindow.Read()  

TextWindow.WriteLine("Name: " + friends[nickname]
                '[ Expression ]'
                Complete the '[ Expression ]' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of '[ Expression ]'. 
                
Time taken: 0.8011486530303955 seconds
Received response with candidate: friends[nickname]["Name"]
friends[nickname]["Phone"]
friends[nickname]

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.Write("Enter the nickname: ") 
nickname = TextWindow.Read()  

TextWindow.WriteLine("Name: " + friends[nickname]
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: ["Name"])
TextWindow.WriteLine("Phone: " + friends[nickname]["Phone"])

OR

TextWindow.WriteLine("Name: " + friends[nickname]["Name"])
TextWindow.WriteLine("Phone: " + friends[nickname]["Phone"])

OR

TextWindow.WriteLine("Name: " + friends[nickname]["Name"] + " Phone: " + friends
Actual result:  [ "Name" ]

Parse State: 32	Cursor Position: 13 51
Candidate List: ['1 : ', '[T, NUM] : 116941', '2 : ', '[T, ID] : 67237', '3 : ', '[T, STR] : 53454', '4 : ', '[T, ID, NT, Idxs] : 2705', '5 : ', '[T, ID, T, ., T, ID, T, (, NT, Exprs, T, )] : 431', '6 : ', '[T, ID, T, ., T, ID] : 82', '7 : ', '[T, (, NT, Expr, T, )] : 57', '8 : ', '[T, -, NT, Primary] : 33']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.Write("Enter the nickname: ") 
nickname = TextWindow.Read()  

TextWindow.WriteLine("Name: " + friends[nickname][
                'String'
                Complete the 'String' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'String'. 
                
Time taken: 0.7648470401763916 seconds
Received response with candidate: "Name']  
"Phone']  
"Email']  

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.Write("Enter the nickname: ") 
nickname = TextWindow.Read()  

TextWindow.WriteLine("Name: " + friends[nickname][
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: "Name"] 
"Phone"] 
"Name"]
Actual result:  "Name"

Parse State: 60	Cursor Position: 13 57
Candidate List: ['1 : ', '[T, ]] : 177961', '2 : ', '[T, ], NT, Idxs] : 62979']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.Write("Enter the nickname: ") 
nickname = TextWindow.Read()  

TextWindow.WriteLine("Name: " + friends[nickname]["Name"
                ']'
                Complete the ']' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of ']'. 
                
Time taken: 0.9757704734802246 seconds
Received response with candidate: 1. + "]"
2. + "]]"
3. + "]]"

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.Write("Enter the nickname: ") 
nickname = TextWindow.Read()  

TextWindow.WriteLine("Name: " + friends[nickname]["Name"
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: 1. + "Phone: " + friends[nickname]["Phone"]
2. ] + "\nPhone: " + friends[nickname]["Phone"]
3. ] + "Phone: " + friends[nickname]["Phone"] + "]"
Actual result:  ]

Parse State: 92	Cursor Position: 13 58
Candidate List: ['1 : ', '[T, )] : 131828']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.Write("Enter the nickname: ") 
nickname = TextWindow.Read()  

TextWindow.WriteLine("Name: " + friends[nickname]["Name"]
                ')'
                Complete the ')' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of ')'. 
                
Time taken: 0.9970166683197021 seconds
Received response with candidate: 1) + ", Phone: " + friends[nickname]["Phone"])
2) )
3) + ", Phone: " + friends[nickname]["Phone"]) + ".")

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.Write("Enter the nickname: ") 
nickname = TextWindow.Read()  

TextWindow.WriteLine("Name: " + friends[nickname]["Name"]
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: 1. TextWindow.WriteLine("Phone: " + friends[nickname]["Phone"])
2. If friends.ContainsKey(nickname) Then
3. EndIf
Actual result:  )

Parse State: 3	Cursor Position: 13 60
Candidate List: ['1 : ', '[T, CR, NT, MoreThanOneStmt] : 207345']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.Write("Enter the nickname: ") 
nickname = TextWindow.Read()  

TextWindow.WriteLine("Name: " + friends[nickname]["Name"])
                'CR MoreThanOneStmt'
                Complete the 'CR MoreThanOneStmt' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'CR MoreThanOneStmt'. 
                
Time taken: 1.2216341495513916 seconds
Received response with candidate: 1. If (nickname = "Rob") Or (nickname = "VJ") Or (nickname = "Ash") Then 
2. If (nickname = "Rob") Then 
3. If (nickname = "VJ") Then

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.Write("Enter the nickname: ") 
nickname = TextWindow.Read()  

TextWindow.WriteLine("Name: " + friends[nickname]["Name"])
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: 1. TextWindow.WriteLine("Phone: " + friends[nickname]["Phone"])
2. TextWindow.WriteLine("Phone number: " + friends[nickname]["Phone"])
3. TextWindow.WriteLine("Contact number: " + friends[nickname]["Phone"])
Actual result:  \n TextWindow . WriteLine ( "Phone: " + friends [ nickname ] [ "Phone" ] )

Parse State: 11	Cursor Position: 14 1
Candidate List: ['1 : ', '[T, ID, T, =, NT, Expr] : 34613', '2 : ', '[T, ID, T, ., T, ID, T, (, NT, Exprs, T, )] : 32747', '3 : ', '[T, ID, T, ., T, ID, T, =, NT, Expr] : 19496', '4 : ', '[T, Sub, T, ID, NT, CRStmtCRs, T, EndSub] : 18421', '5 : ', '[T, ID, T, (, T, )] : 9474', '6 : ', '[T, ID, NT, Idxs, T, =, NT, Expr] : 9366', '7 : ', '[T, If, NT, Expr, T, Then, NT, CRStmtCRs, NT, MoreThanZeroElseIf] : 5075', '8 : ', '[T, For, T, ID, T, =, NT, Expr, T, To, NT, Expr, NT, OptStep, NT, CRStmtCRs, T, EndFor] : 2043', '9 : ', '[T, While, NT, Expr, NT, CRStmtCRs, T, EndWhile] : 1706', '10 : ', '[T, ID, T, :] : 1074', '11 : ', '[T, Goto, T, ID] : 421']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.Write("Enter the nickname: ") 
nickname = TextWindow.Read()  

TextWindow.WriteLine("Name: " + friends[nickname]["Name"])
                'Identifier . Identifier ( Expression )'
                Complete the 'Identifier . Identifier ( Expression )' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'Identifier . Identifier ( Expression )'. 
                
Time taken: 1.0372295379638672 seconds
Received response with candidate: Complete the 'Identifier . Identifier ( Expression )' part of the code three times in the Small Basic programming language:

1. friends["Rob"]["Name"]
2. friends["VJ"]["Phone"]
3. friends[nickname]["Phone"]

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.Write("Enter the nickname: ") 
nickname = TextWindow.Read()  

TextWindow.WriteLine("Name: " + friends[nickname]["Name"])
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: 1. TextWindow.WriteLine("Phone: " + friends[nickname]["Phone"])
2. TextWindow.WriteLine("Thank you for using the program!")
3. TextWindow.WriteLine("Nickname not found. Please try again.")
Actual result:  TextWindow . WriteLine ( "Phone: " + friends [ nickname ] [ "Phone" ] )

Parse State: 6	Cursor Position: 14 11
Candidate List: ['1 : ', '[T, =, NT, Expr] : 162103', '2 : ', '[T, ., T, ID, T, (, NT, Exprs, T, )] : 131828', '3 : ', '[T, [, NT, Expr, T, ]] : 68410', '4 : ', '[T, ., T, ID, T, =, NT, Expr] : 45876', '5 : ', '[T, (, T, )] : 31942', '6 : ', '[T, [, NT, Expr, T, ], NT, Idxs] : 28947', '7 : ', '[T, :] : 2238']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.Write("Enter the nickname: ") 
nickname = TextWindow.Read()  

TextWindow.WriteLine("Name: " + friends[nickname]["Name"]) 
TextWindow
                '. Identifier ( Expression )'
                Complete the '. Identifier ( Expression )' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of '. Identifier ( Expression )'. 
                
Time taken: 0.9147367477416992 seconds
Received response with candidate: .Complete('Rob') 
.Complete('VJ') 
.Complete('Ash')

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.Write("Enter the nickname: ") 
nickname = TextWindow.Read()  

TextWindow.WriteLine("Name: " + friends[nickname]["Name"]) 
TextWindow
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: 1. TextWindow.WriteLine("Phone: " + friends[nickname]["Phone"]) 
2. .Pause()  
3. .Read()
Actual result:  . WriteLine ( "Phone: " + friends [ nickname ] [ "Phone" ] )

Parse State: 30	Cursor Position: 14 12
Candidate List: ['1 : ', '[T, ID, T, (, NT, Exprs, T, )] : 131828', '2 : ', '[T, ID, T, =, NT, Expr] : 45876']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.Write("Enter the nickname: ") 
nickname = TextWindow.Read()  

TextWindow.WriteLine("Name: " + friends[nickname]["Name"]) 
TextWindow.
                'Identifier ( Expression )'
                Complete the 'Identifier ( Expression )' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'Identifier ( Expression )'. 
                
Time taken: 1.3621206283569336 seconds
Received response with candidate: TextWindow.WriteLine("Phone: " + friends[nickname]["Phone"]) 

friends["VJ"]["City"] = "New York"
TextWindow.WriteLine("City: " + friends["VJ"]["City"])

nickname = TextWindow.Read()
TextWindow.WriteLine("Phone: " + friends[nickname]["Phone"])

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.Write("Enter the nickname: ") 
nickname = TextWindow.Read()  

TextWindow.WriteLine("Name: " + friends[nickname]["Name"]) 
TextWindow.
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: TextWindow.WriteLine("Phone: " + friends[nickname]["Phone"]) 

TextWindow.WriteLine("Sorry, nickname not found in records.") 

TextWindow.WriteLine("Please try again.")
Actual result:  WriteLine ( "Phone: " + friends [ nickname ] [ "Phone" ] )

Parse State: 58	Cursor Position: 14 21
Candidate List: ['1 : ', '[T, (, NT, Exprs, T, )] : 131828', '2 : ', '[T, =, NT, Expr] : 45876']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.Write("Enter the nickname: ") 
nickname = TextWindow.Read()  

TextWindow.WriteLine("Name: " + friends[nickname]["Name"]) 
TextWindow.WriteLine
                '( Expression )'
                Complete the '( Expression )' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of '( Expression )'. 
                
Time taken: 0.7469403743743896 seconds
Received response with candidate: friends["Rob"]["Phone"]

friends["VJ"]["Phone"]

friends["Ash"]["Phone"]

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.Write("Enter the nickname: ") 
nickname = TextWindow.Read()  

TextWindow.WriteLine("Name: " + friends[nickname]["Name"]) 
TextWindow.WriteLine
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: 1. TextWindow.WriteLine("Phone number: " + friends[nickname]["Phone"])
2. TextWindow.WriteLine("Nickname not found in the list.")
3. TextWindow.WriteLine("Please enter a valid nickname.")
Actual result:  ( "Phone: " + friends [ nickname ] [ "Phone" ] )

Parse State: 83	Cursor Position: 14 22
Candidate List: ['1 : ', '[T, ID] : 40231', '2 : ', '[T, NUM] : 32276', '3 : ', '[T, STR] : 31274', '4 : ', '[T, ID, NT, Idxs] : 11367', '5 : ', '[T, -, NT, Primary] : 1956', '6 : ', '[T, ID, T, ., T, ID, T, (, NT, Exprs, T, )] : 685', '7 : ', '[T, (, NT, Expr, T, )] : 324', '8 : ', '[T, ID, T, ., T, ID] : 242']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.Write("Enter the nickname: ") 
nickname = TextWindow.Read()  

TextWindow.WriteLine("Name: " + friends[nickname]["Name"]) 
TextWindow.WriteLine(
                'String'
                Complete the 'String' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'String'. 
                
Time taken: 1.110288381576538 seconds
Received response with candidate: 
1. TextWindow.WriteLine("Phone: " + friends[nickname]["Phone"])
2. TextWindow.WriteLine("Nickname: " + nickname)
3. TextWindow.WriteLine("Friend's Details: " + friends[nickname]["Name"] + " - " + friends[nickname]["Phone"])

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.Write("Enter the nickname: ") 
nickname = TextWindow.Read()  

TextWindow.WriteLine("Name: " + friends[nickname]["Name"]) 
TextWindow.WriteLine(
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: 1. TextWindow.WriteLine("Phone: " + friends[nickname]["Phone"])
2. TextWindow.WriteLine("Phone number of " + friends[nickname]["Name"] + " is " + friends[nickname]["Phone"])
3. TextWindow.WriteLine("Contact information: Name - " + friends[nickname]["Name"] + ", Phone - " + friends
Actual result:  "Phone: "

Parse State: 18	Cursor Position: 14 32
Candidate List: ['1 : ', '[T, +, NT, MultiplicativeExpr] : 95446', '2 : ', '[T, -, NT, MultiplicativeExpr] : 41871']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.Write("Enter the nickname: ") 
nickname = TextWindow.Read()  

TextWindow.WriteLine("Name: " + friends[nickname]["Name"]) 
TextWindow.WriteLine("Phone: "
                '+ MultiplicativeExpr'
                Complete the '+ MultiplicativeExpr' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of '+ MultiplicativeExpr'. 
                
Time taken: 1.3728947639465332 seconds
Received response with candidate: TextWindow.WriteLine("Phone: " + friends[nickname]["Phone"])

TextWindow.WriteLine("Phone: " + friends[nickname]["Name"] + " " + friends[nickname]["Phone"])

TextWindow.WriteLine("Phone: " + "1-" + friends[nickname]["Phone"])

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.Write("Enter the nickname: ") 
nickname = TextWindow.Read()  

TextWindow.WriteLine("Name: " + friends[nickname]["Name"]) 
TextWindow.WriteLine("Phone: "
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: TextWindow.WriteLine("Phone: " + friends[nickname]["Phone"]) 

or 

TextWindow.WriteLine("Phone: " + friends[nickname]["Phone"] + " is the number for " + friends[nickname]["Name"]) 

or 

TextWindow.WriteLine("Phone: " + friends[nickname]["Phone"] + " belongs to " + friends[n
Actual result:  + friends [ nickname ] [ "Phone" ]

Parse State: 48	Cursor Position: 14 34
Candidate List: ['1 : ', '[T, ID] : 38463', '2 : ', '[T, NUM] : 30206', '3 : ', '[T, STR] : 15165', '4 : ', '[T, ID, NT, Idxs] : 7164', '5 : ', '[T, (, NT, Expr, T, )] : 3656', '6 : ', '[T, ID, T, ., T, ID, T, (, NT, Exprs, T, )] : 2629', '7 : ', '[T, ID, T, ., T, ID] : 322', '8 : ', '[T, -, NT, Primary] : 9']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.Write("Enter the nickname: ") 
nickname = TextWindow.Read()  

TextWindow.WriteLine("Name: " + friends[nickname]["Name"]) 
TextWindow.WriteLine("Phone: " +
                'Identifier Idxs'
                Complete the 'Identifier Idxs' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'Identifier Idxs'. 
                
Time taken: 1.2470226287841797 seconds
Received response with candidate: 1. TextWindow.WriteLine("Phone: " + friends[nickname]["Phone"]) 
2. TextWindow.WriteLine("Phone: " + friends["Rob"]["Phone"]) 
3. TextWindow.WriteLine("Phone: " + friends["VJ"]["Phone"])

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.Write("Enter the nickname: ") 
nickname = TextWindow.Read()  

TextWindow.WriteLine("Name: " + friends[nickname]["Name"]) 
TextWindow.WriteLine("Phone: " +
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: " + friends[nickname]["Phone"])
" + friends[nickname]["Phone"]
" + friends[nickname]["Phone"] + ""
Actual result:  friends [ nickname ] [ "Phone" ]

Parse State: 22	Cursor Position: 14 41
Candidate List: ['1 : ', '[T, ., T, ID, T, (, NT, Exprs, T, )] : 74070', '2 : ', '[T, [, NT, Expr, T, ]] : 59127', '3 : ', '[T, [, NT, Expr, T, ], NT, Idxs] : 21477', '4 : ', '[T, ., T, ID] : 16490']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.Write("Enter the nickname: ") 
nickname = TextWindow.Read()  

TextWindow.WriteLine("Name: " + friends[nickname]["Name"]) 
TextWindow.WriteLine("Phone: " + friends
                '[ Expression ] Idxs'
                Complete the '[ Expression ] Idxs' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of '[ Expression ] Idxs'. 
                
Time taken: 0.932633638381958 seconds
Received response with candidate: ["Rob"]["Phone"] 
["VJ"]["Phone"] 
["Ash"]["Phone"]

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.Write("Enter the nickname: ") 
nickname = TextWindow.Read()  

TextWindow.WriteLine("Name: " + friends[nickname]["Name"]) 
TextWindow.WriteLine("Phone: " + friends
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: 1. ["Phone"])
2. ["[" + nickname + "]" + "[" + "Phone" + "]")
3. [""]
Actual result:  [ nickname ] [ "Phone" ]

Parse State: 32	Cursor Position: 14 42
Candidate List: ['1 : ', '[T, NUM] : 116941', '2 : ', '[T, ID] : 67237', '3 : ', '[T, STR] : 53454', '4 : ', '[T, ID, NT, Idxs] : 2705', '5 : ', '[T, ID, T, ., T, ID, T, (, NT, Exprs, T, )] : 431', '6 : ', '[T, ID, T, ., T, ID] : 82', '7 : ', '[T, (, NT, Expr, T, )] : 57', '8 : ', '[T, -, NT, Primary] : 33']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.Write("Enter the nickname: ") 
nickname = TextWindow.Read()  

TextWindow.WriteLine("Name: " + friends[nickname]["Name"]) 
TextWindow.WriteLine("Phone: " + friends[
                'Identifier'
                Complete the 'Identifier' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'Identifier'. 
                
Time taken: 0.8119125366210938 seconds
Received response with candidate: 1. friends[nickname]["Phone"]
2. friends["VJ"]["Phone"]
3. friends["Ash"]["Phone"]

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.Write("Enter the nickname: ") 
nickname = TextWindow.Read()  

TextWindow.WriteLine("Name: " + friends[nickname]["Name"]) 
TextWindow.WriteLine("Phone: " + friends[
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: ["Phone"])
Actual result:  nickname

Parse State: 60	Cursor Position: 14 50
Candidate List: ['1 : ', '[T, ]] : 177961', '2 : ', '[T, ], NT, Idxs] : 62979']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.Write("Enter the nickname: ") 
nickname = TextWindow.Read()  

TextWindow.WriteLine("Name: " + friends[nickname]["Name"]) 
TextWindow.WriteLine("Phone: " + friends[nickname
                '] Idxs'
                Complete the '] Idxs' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of '] Idxs'. 
                
Time taken: 1.2576236724853516 seconds
Received response with candidate: 1. TextWindow.WriteLine("Phone: " + friends[nickname]["Phone"])
2. TextWindow.WriteLine("Phone: " + friends[nickname]["Phone"]   )  
3. TextWindow.WriteLine("Phone: " + friends[nickname]["Phone"]    )

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.Write("Enter the nickname: ") 
nickname = TextWindow.Read()  

TextWindow.WriteLine("Name: " + friends[nickname]["Name"]) 
TextWindow.WriteLine("Phone: " + friends[nickname
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: 1. TextWindow.WriteLine("Phone: " + friends[nickname]["Phone"])
2. ")
3. TextWindow.WriteLine(" doesn't exist.")
Actual result:  ] [ "Phone" ]

Parse State: 84	Cursor Position: 14 51
Candidate List: ['1 : ', '[T, [, NT, Expr, T, ]] : 50424', '2 : ', '[T, [, NT, Expr, T, ], NT, Idxs] : 12555']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.Write("Enter the nickname: ") 
nickname = TextWindow.Read()  

TextWindow.WriteLine("Name: " + friends[nickname]["Name"]) 
TextWindow.WriteLine("Phone: " + friends[nickname]
                '[ Expression ]'
                Complete the '[ Expression ]' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of '[ Expression ]'. 
                
Time taken: 0.9316895008087158 seconds
Received response with candidate: 1. ['Phone']
2. ['Phone']
3. ['Name']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.Write("Enter the nickname: ") 
nickname = TextWindow.Read()  

TextWindow.WriteLine("Name: " + friends[nickname]["Name"]) 
TextWindow.WriteLine("Phone: " + friends[nickname]
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: 1. TextWindow.WriteLine("Phone: " + friends[nickname]["Phone"])
2. TextWindow.WriteLine("Phone: " + friends[nickname]["Phone"] + " is the phone number")
3. TextWindow.WriteLine("Phone number: " + friends[nickname]["Phone"])
4. TextWindow.WriteLine("Phone number for " + friends[nickname
Actual result:  [ "Phone" ]

Parse State: 32	Cursor Position: 14 52
Candidate List: ['1 : ', '[T, NUM] : 116941', '2 : ', '[T, ID] : 67237', '3 : ', '[T, STR] : 53454', '4 : ', '[T, ID, NT, Idxs] : 2705', '5 : ', '[T, ID, T, ., T, ID, T, (, NT, Exprs, T, )] : 431', '6 : ', '[T, ID, T, ., T, ID] : 82', '7 : ', '[T, (, NT, Expr, T, )] : 57', '8 : ', '[T, -, NT, Primary] : 33']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.Write("Enter the nickname: ") 
nickname = TextWindow.Read()  

TextWindow.WriteLine("Name: " + friends[nickname]["Name"]) 
TextWindow.WriteLine("Phone: " + friends[nickname][
                'String'
                Complete the 'String' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'String'. 
                
Time taken: 1.1415162086486816 seconds
Received response with candidate: 

1. "Phone"
2. "Phone"
3. "Phone"

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.Write("Enter the nickname: ") 
nickname = TextWindow.Read()  

TextWindow.WriteLine("Name: " + friends[nickname]["Name"]) 
TextWindow.WriteLine("Phone: " + friends[nickname][
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: "Phone"]  
"Phone"] + "Phone"]  
"Name")  
Actual result:  "Phone"

Parse State: 60	Cursor Position: 14 59
Candidate List: ['1 : ', '[T, ]] : 177961', '2 : ', '[T, ], NT, Idxs] : 62979']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.Write("Enter the nickname: ") 
nickname = TextWindow.Read()  

TextWindow.WriteLine("Name: " + friends[nickname]["Name"]) 
TextWindow.WriteLine("Phone: " + friends[nickname]["Phone"
                ']'
                Complete the ']' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of ']'. 
                
Time taken: 0.9167647361755371 seconds
Received response with candidate: 1. friends[nickname]["Phone"]
2. friends[nickname]["Phone"]]
3. friends[nickname]["Phone"]]

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.Write("Enter the nickname: ") 
nickname = TextWindow.Read()  

TextWindow.WriteLine("Name: " + friends[nickname]["Name"]) 
TextWindow.WriteLine("Phone: " + friends[nickname]["Phone"
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: 1. TextWindow.Write("Enter the nickname: ")
2. = TextWindow.Read()
3. ])
Actual result:  ]

Parse State: 92	Cursor Position: 14 60
Candidate List: ['1 : ', '[T, )] : 131828']

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.Write("Enter the nickname: ") 
nickname = TextWindow.Read()  

TextWindow.WriteLine("Name: " + friends[nickname]["Name"]) 
TextWindow.WriteLine("Phone: " + friends[nickname]["Phone"]
                ')'
                Complete the ')' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of ')'. 
                
Time taken: 0.6364109516143799 seconds
Received response with candidate: 1) )

2) ))

3) )))

                This is the incomplete Small Basic programming language code:
                friends["Rob"]["Name"] = "Robert" 
friends["Rob"]["Phone"] = "555-6789"  

friends["VJ"]["Name"] = "Vijaye" 
friends["VJ"]["Phone"] = "555-4567"  

friends["Ash"]["Name"] = "Ashley" 
friends["Ash"]["Phone"] = "555-2345"  

TextWindow.Write("Enter the nickname: ") 
nickname = TextWindow.Read()  

TextWindow.WriteLine("Name: " + friends[nickname]["Name"]) 
TextWindow.WriteLine("Phone: " + friends[nickname]["Phone"]
                'next token or line'
                Complete the 'next token or line' part of the code three times in the Small Basic programming language. Just show your three probable answers in place of 'next token or line'. 
                
Received response without candidate: 1. TextWindow.WriteLine("Is this information correct? Y/N")
2. TextWindow.WriteLine("Would you like to edit this contact? Y/N")
3. TextWindow.WriteLine("Do you want to add a new contact? Y/N")
Actual result:  )

